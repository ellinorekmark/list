{"version":3,"file":"static/js/876.b42dc953.chunk.js","mappings":"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","sources":["ApiCaller.js","components/PageHeader.js","pages/Overview.js"],"sourcesContent":["import {BASE_URL} from \"./constants\";\r\n\r\nexport class ApiCaller {\r\n\r\n\r\n    baseUrl = BASE_URL\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    async sendPost(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            console.log(await response.json())\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n        return  await response.json()\r\n    }\r\n    async sendPostNoLogin(path, data) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n\r\n        return await response.json()\r\n    }\r\n\r\n    async sendGet(path, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    async sendDelete(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json()\r\n    }\r\n\r\n\r\n}\r\n","import {Typography} from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst PageHeader = ({title}) => {\r\n\r\n    return (\r\n        <>\r\n\r\n            <Box sx={{ paddingTop: 2 }}>\r\n                <Typography fontSize={\"xx-large\"} sx={{ fontFamily: 'Garamond', color:'primary.main'}}>\r\n                    <strong>{title}</strong>\r\n                </Typography>\r\n                <br />\r\n            </Box>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n\r\n\r\n\r\n","import React, {useState, useEffect, useContext} from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport ListAltIcon from '@mui/icons-material/ListAltTwoTone';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport {Typography, CircularProgress, ToggleButtonGroup, ToggleButton, Icon} from '@mui/material';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport LibraryAddCheckIcon from '@mui/icons-material/LibraryAddCheckTwoTone';\r\nimport PageHeader from \"../components/PageHeader\";\r\nconst apiCaller = new ApiCaller();\r\n\r\nexport default function InteractiveList() {\r\n    const {loginDetails, user} = useContext(AuthContext);\r\n    const [overviewData, setOverviewData] = useState([]);\r\n    const [activeFiltered, setFilteredList] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const navigate = useNavigate();\r\n    const [alignment, setAlignment] = React.useState('all');\r\n\r\n    const handleChange = (event, newAlignment) => {\r\n        setAlignment(newAlignment);\r\n        filterList(newAlignment);\r\n    };\r\n\r\n    const sortListByLastEdit = (data) => {\r\n        return data.sort((a, b) => new Date(b.lastEdit) - new Date(a.lastEdit));\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const data = await apiCaller.sendGet(\"list/all\", loginDetails);\r\n                const sortedData = sortListByLastEdit(data);\r\n                setOverviewData(sortedData);\r\n                setFilteredList(sortedData);\r\n            } catch (error) {\r\n                console.error(\"Error fetching data\", error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [loginDetails]);\r\n\r\n    function goToList(id) {\r\n        navigate(`/web/list/${id}`);\r\n    }\r\n\r\n    function filterList(option) {\r\n        let filteredData = [];\r\n        switch (option) {\r\n            case \"all\":\r\n                filteredData = overviewData;\r\n                break;\r\n            case \"private\":\r\n                filteredData = overviewData.filter(privateList);\r\n                break;\r\n            case \"shared\":\r\n                filteredData = overviewData.filter(sharedList);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setFilteredList(sortListByLastEdit(filteredData));\r\n    }\r\n\r\n    function privateList(l) {\r\n        return l.users === 1;\r\n    }\r\n\r\n    function sharedList(l) {\r\n        return l.users !== 1;\r\n    }\r\n\r\n    function getListIcon(type) {\r\n        switch (type) {\r\n            case 'CHECK':\r\n                return <LibraryAddCheckIcon sx={{color: \"primary.darker\"}}/>;\r\n            default:\r\n                return <ListAltIcon sx={{color: \"primary.darker\"}}/>;\r\n        }\r\n    }\r\n\r\n    function ownsList(l){\r\n        return l.owner === user.username;\r\n    }\r\n    return (\r\n        <>\r\n            <Box maxWidth={750} sx={{ mx: 'auto' }}>\r\n                <PageHeader title={\"Lists\"}></PageHeader>\r\n                <Box sx={{ paddingBottom: 2 }}>\r\n                    <ToggleButtonGroup\r\n                        color=\"primary\"\r\n                        value={alignment}\r\n                        exclusive\r\n                        onChange={handleChange}\r\n                        aria-label=\"Filter\"\r\n                    >\r\n                        <ToggleButton value=\"private\">Private</ToggleButton>\r\n                        <ToggleButton value=\"all\">All</ToggleButton>\r\n                        <ToggleButton value=\"shared\">Shared</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </Box>\r\n\r\n                {loading && (\r\n                    <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n                        <CircularProgress />\r\n                    </Box>\r\n                )}\r\n\r\n                {!loading && activeFiltered.length === 0 && (\r\n                    <Typography variant=\"h7\" color=\"textSecondary\" align=\"center\">\r\n                        Empty\r\n                    </Typography>\r\n                )}\r\n\r\n                {!loading && activeFiltered.length > 0 && (\r\n                    <List dense>\r\n                        {activeFiltered.map((list) => (\r\n                            <ListItem\r\n                                key={list.id}\r\n                                onClick={() => goToList(list.id)}\r\n                                sx={{\r\n                                    cursor: 'pointer',\r\n                                    border: '1px solid ',\r\n                                    borderColor: 'primary.darker',\r\n                                    marginTop: '5px',\r\n                                    borderRadius: '5px',\r\n                                }}\r\n                            >\r\n                                <ListItemAvatar>\r\n                                    <Avatar sx={{backgroundColor: \"primary.lighter\"}}>\r\n                                        {getListIcon(list.type)}\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary={list.name}\r\n                                    secondary={list.desc}\r\n                                />\r\n                                {!ownsList(list)? (\r\n                                    <Box sx={{  color: 'primary.lighter', display: 'flex', flexDirection: 'column', alignItems: 'center',}}>\r\n                                        <PersonIcon />\r\n                                        <Typography >{list.owner}</Typography>\r\n                                    </Box>\r\n                                ): (\r\n                                    <Box><Icon></Icon></Box>\r\n                                )}\r\n\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                )}\r\n            </Box>\r\n        </>\r\n    );\r\n}\r\n"],"names":["ApiCaller","constructor","baseUrl","BASE_URL","sendPost","path","data","loginDetails","response","fetch","this","method","headers","body","JSON","stringify","ok","console","log","json","errorResponse","Error","sendPostNoLogin","sendGet","sendDelete","_ref","title","_jsx","_Fragment","children","_jsxs","Box","sx","paddingTop","Typography","fontSize","fontFamily","color","apiCaller","InteractiveList","user","useContext","AuthContext","overviewData","setOverviewData","useState","activeFiltered","setFilteredList","loading","setLoading","navigate","useNavigate","alignment","setAlignment","React","sortListByLastEdit","sort","a","b","Date","lastEdit","privateList","l","users","sharedList","useEffect","async","sortedData","error","fetchData","maxWidth","mx","PageHeader","paddingBottom","ToggleButtonGroup","value","exclusive","onChange","handleChange","event","newAlignment","option","filteredData","filter","filterList","ToggleButton","display","justifyContent","mt","CircularProgress","length","variant","align","List","dense","map","list","ListItem","onClick","goToList","id","concat","cursor","border","borderColor","marginTop","borderRadius","ListItemAvatar","Avatar","backgroundColor","type","LibraryAddCheckIcon","ListAltIcon","ListItemText","primary","name","secondary","desc","owner","username","flexDirection","alignItems","PersonIcon","Icon"],"sourceRoot":""}