{"version":3,"file":"static/js/99.952cca28.chunk.js","mappings":"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","sources":["ApiCaller.js","components/BasicList.js","components/CheckListDisplay.js","components/LinkedList.js","components/ListDesc.js","components/PageHeader.js","pages/PublicListView.js"],"sourcesContent":["import {BASE_URL} from \"./constants\";\r\n\r\nexport class ApiCaller {\r\n\r\n\r\n    baseUrl = BASE_URL\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    async sendPost(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            console.log(await response.json())\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n        return  await response.json()\r\n    }\r\n    async sendPostNoLogin(path, data) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n\r\n        return await response.json()\r\n    }\r\n\r\n    async sendGet(path, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n    async sendGetNoAuth(path) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    async sendDelete(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json()\r\n    }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    IconButton,\r\n    Icon\r\n} from '@mui/material';\r\n\r\nconst BasicList = ({uList}) => {\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {uList.items.map((item) => (\r\n                    <ListItem\r\n                        key={item.id}\r\n                        sx={{\r\n                            cursor: 'pointer',\r\n                            border: '1px solid ',\r\n                            borderColor: 'primary.darker',\r\n                            marginTop: '5px',\r\n                            borderRadius: '5px',\r\n                        }}\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <Box>\r\n                            </Box>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={item.item}\r\n                            primaryTypographyProps={{fontSize: '18px'}}\r\n                        />\r\n                        <IconButton edge=\"end\">\r\n                            <Icon></Icon>\r\n                        </IconButton>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicList;\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    IconButton,\r\n    Icon\r\n} from '@mui/material';\r\n\r\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\nimport {AuthContext} from \"../AuthContext\";\r\n\r\nconst CheckListDisplay = ({ uList, updateList }) => {\r\n    const {user} = useContext(AuthContext);\r\n    const [editRights, setEditRights] = useState(() => {\r\n        return user.username === uList.owner || uList.editors.includes(user.username);\r\n    });\r\n\r\n    function getCheckStatus(status) {\r\n        switch (status) {\r\n            case '1':\r\n                return <CheckBoxIcon sx={{color:'secondary.main'}}/>;\r\n            default:\r\n                return <CheckBoxOutlineBlankIcon sx={{color:'secondary.main'}} />;\r\n        }\r\n    }\r\n\r\n    const handleItemClick = (itemId) => {\r\n        if(editRights){\r\n            const updatedItems = uList.items.map((item) =>\r\n                item.id === itemId\r\n                    ? { ...item, itemStatus: item.itemStatus === '1' ? '' : '1' }\r\n                    : item\r\n            );\r\n            updateList({ ...uList, items: updatedItems });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {uList.items.map((item) => (\r\n                    <ListItem\r\n                        key={item.id}\r\n                        sx={{\r\n                            cursor: 'pointer',\r\n                            border: '1px solid ',\r\n                            borderColor: 'primary.darker',\r\n                            marginTop: '5px',\r\n                            borderRadius: '5px',\r\n                        }}\r\n                        onClick={() => handleItemClick(item.id)}\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <Box>\r\n                                {getCheckStatus(item.itemStatus)}\r\n                            </Box>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={item.item}\r\n                            primaryTypographyProps={{ fontSize: '18px' }}\r\n                        />\r\n                        <IconButton edge=\"end\" >\r\n                            <Icon></Icon>\r\n                        </IconButton>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CheckListDisplay;\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    IconButton,\r\n    Icon, DialogTitle, DialogContent, DialogActions, Button, Dialog, TextField,\r\n} from '@mui/material';\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\nimport {AuthContext} from \"../AuthContext\";\r\n\r\nconst LinkedList = ({uList, updateList}) => {\r\n    const {user} = useContext(AuthContext);\r\n    const [editRights, setEditRights] = useState(() => {\r\n        return user.username === uList.owner || uList.editors.includes(user.username);\r\n    });\r\n\r\n\r\n    const [dialog, setDialog] = useState(false)\r\n    const [selected, setSelected] = useState(\"\")\r\n    const [selectedURL, setSelectedURL] = useState(\"\")\r\n    const [copied, setCopied] = useState(false)\r\n\r\n    function openInNewTab(url) {\r\n        if (url !== \"\") {\r\n            window.open(url, '_blank', 'noopener,noreferrer');\r\n        }\r\n\r\n    }\r\n\r\n    function openSettings(item) {\r\n        setSelected(item);\r\n        setSelectedURL(item.itemStatus)\r\n        setDialog(true)\r\n    }\r\n\r\n    function saveAndClose() {\r\n        const updatedItems = uList.items.map((item) =>\r\n            item.id === selected.id\r\n                ? {...item, itemStatus: selectedURL}\r\n                : item\r\n        );\r\n        updateList({...uList, items: updatedItems});\r\n        setDialog(false);\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false)\r\n    }\r\n\r\n    const copyToClipboard = async () => {\r\n        try {\r\n            await navigator.clipboard.writeText(selectedURL);\r\n            setCopied(true);\r\n            setTimeout(() => setCopied(false), 2000);\r\n        } catch (err) {\r\n            console.error(\"Failed to copy text: \", err);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {uList.items.map((item) => (\r\n\r\n                    <ListItem\r\n                        key={item.id}\r\n                        sx={{\r\n                            cursor: 'pointer',\r\n                            border: '1px solid ',\r\n                            borderColor: 'primary.darker',\r\n                            marginTop: '5px',\r\n                            borderRadius: '5px',\r\n                        }}\r\n                    >\r\n                        <ListItemAvatar onClick={() => openInNewTab(item.itemStatus)}>\r\n                            {item.itemStatus !== \"\" && <OpenInNewIcon></OpenInNewIcon>}\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={item.item}\r\n                            primaryTypographyProps={{fontSize: '18px'}}\r\n                            onClick={() => openInNewTab(item.itemStatus)}\r\n                        />\r\n                        <IconButton edge=\"end\" onClick={() => openSettings(item)}>\r\n                            <SettingsIcon></SettingsIcon>\r\n                        </IconButton>\r\n                    </ListItem>\r\n\r\n\r\n                ))}\r\n            </List>\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n            >\r\n                <DialogTitle textAlign={'center'}>\r\n                    Edit link\r\n                </DialogTitle>\r\n                <br/>\r\n                {selectedURL !== \"\" &&\r\n                <Button variant=\"outlined\" fullWidth onClick={copyToClipboard}>\r\n                    {copied ? \"Link Copied!\" : \"Copy Link\"}\r\n                </Button>\r\n            }\r\n                <DialogContent>\r\n\r\n\r\n                    {editRights ? (<TextField label=\"Edit Link\"\r\n                                              value={selectedURL}\r\n                                              onChange={(e) => setSelectedURL(e.target.value)}\r\n                    ></TextField>) : (\r\n                        <TextField label=\"Link\"\r\n                                   value={selectedURL}\r\n                        ></TextField>\r\n                    )}\r\n\r\n\r\n                </DialogContent>\r\n                <DialogActions sx={{justifyContent: 'center'}}>\r\n\r\n\r\n                    <Button onClick={() => {\r\n                        setDialog(false)\r\n                    }} variant=\"contained\">\r\n                        Close\r\n                    </Button>\r\n                    {editRights && (<Button onClick={() => {\r\n                        saveAndClose()\r\n                    }} variant=\"contained\">\r\n                        Save\r\n                    </Button>)}\r\n\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LinkedList;\r\n","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst ListDesc = ({uList}) => {\r\n\r\n    const description = () => {\r\n        if (uList.listInfo.listDesc !== null) {\r\n            return <>\r\n                <Box sx={{marginBottom: 1, gridRow: '1', gridColumn: \"1 / 2\", m: 1, paddingLeft: 2, paddingRight: 2}}>\r\n                    <Typography fontSize={\"large\"}>\r\n                        {uList.listInfo.listDesc}\r\n                        <br/>\r\n                    </Typography>\r\n                </Box>\r\n            </>\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {description()}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListDesc;\r\n\r\n","import {Typography} from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst PageHeader = ({title}) => {\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ paddingTop: 2, paddingRight:5, paddingLeft:5}}>\r\n                <Typography fontSize={\"xx-large\"} sx={{ fontFamily: 'Garamond', color:'primary.main'}}>\r\n                    <strong>{title}</strong>\r\n                </Typography>\r\n                <br />\r\n            </Box>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n\r\n\r\n\r\n","import React, {  useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport {Box, CircularProgress, Typography} from '@mui/material';\r\n\r\nimport { ApiCaller } from \"../ApiCaller\";\r\nimport PageHeader from \"../components/PageHeader\";\r\nimport ListDesc from \"../components/ListDesc\";\r\nimport CheckListDisplay from \"../components/CheckListDisplay\";\r\nimport BasicList from \"../components/BasicList\";\r\nimport LinkedList from \"../components/LinkedList\";\r\n\r\nconst apiCaller = new ApiCaller();\r\n\r\nconst PublicListView = () => {\r\n\r\n    const { uuid } = useParams();\r\n    const [loading, setLoading] = useState(true);\r\n    const [uList, setList] = useState(null);\r\n    const [fetchError, setFetchError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchList = async () => {\r\n            try {\r\n                const data = await apiCaller.sendGetNoAuth(`public/${uuid}`);\r\n                setList(data);\r\n            } catch (error) {\r\n                setFetchError(true);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchList();\r\n\r\n    }, [uuid]);\r\n\r\n    function updateList(){\r\n        //do nothing\r\n    }\r\n\r\n    function getListType(type) {\r\n        switch (type.listInfo.type) {\r\n            case 'CHECK':\r\n                return <CheckListDisplay uList={uList} updateList={updateList}/>\r\n            case 'LINK':\r\n                return <LinkedList uList={uList} updateList={updateList()}></LinkedList>\r\n            default:\r\n                return <BasicList uList={uList}/>;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box maxWidth={750} sx={{mx: 'auto'}} variant=\"contained\">\r\n            {loading ? (\r\n                <Box>\r\n                    <CircularProgress />\r\n                    <Typography>Loading List</Typography>\r\n                </Box>\r\n            ) : (\r\n                <>\r\n                    {fetchError ? (\r\n                        <Typography>Unable to load list.</Typography>\r\n                    ) : (\r\n                        <>\r\n                        <PageHeader title={uList.listInfo.listName}></PageHeader>\r\n                        <ListDesc uList={uList}></ListDesc>\r\n                            <Box>{getListType(uList)}</Box>\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PublicListView;\r\n"],"names":["ApiCaller","constructor","baseUrl","BASE_URL","sendPost","path","data","loginDetails","response","fetch","this","method","headers","body","JSON","stringify","ok","console","log","json","errorResponse","Error","sendPostNoLogin","sendGet","sendGetNoAuth","sendDelete","_ref","uList","_jsx","_Fragment","children","List","items","map","item","_jsxs","ListItem","sx","cursor","border","borderColor","marginTop","borderRadius","ListItemAvatar","Box","ListItemText","primary","primaryTypographyProps","fontSize","IconButton","edge","Icon","id","updateList","user","useContext","AuthContext","editRights","setEditRights","useState","username","owner","editors","includes","onClick","itemId","updatedItems","itemStatus","handleItemClick","status","CheckBoxIcon","color","CheckBoxOutlineBlankIcon","dialog","setDialog","selected","setSelected","selectedURL","setSelectedURL","copied","setCopied","openInNewTab","url","window","open","OpenInNewIcon","openSettings","SettingsIcon","Dialog","onClose","closeDialog","DialogTitle","textAlign","Button","variant","fullWidth","async","navigator","clipboard","writeText","setTimeout","err","error","DialogContent","TextField","label","value","onChange","e","target","DialogActions","justifyContent","saveAndClose","description","listInfo","listDesc","marginBottom","gridRow","gridColumn","m","paddingLeft","paddingRight","Typography","title","paddingTop","fontFamily","apiCaller","PublicListView","uuid","useParams","loading","setLoading","setList","fetchError","setFetchError","useEffect","concat","fetchList","maxWidth","mx","CircularProgress","PageHeader","listName","ListDesc","type","CheckListDisplay","LinkedList","BasicList","getListType"],"sourceRoot":""}