{"version":3,"file":"static/js/936.d8c0e98f.chunk.js","mappings":"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","sources":["ApiCaller.js","components/PageHeader.js","pages/Home.js"],"sourcesContent":["import {BASE_URL} from \"./constants\";\r\n\r\nexport class ApiCaller {\r\n\r\n\r\n    baseUrl = BASE_URL\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    async sendPost(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            console.log(await response.json())\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n        return  await response.json()\r\n    }\r\n    async sendPostNoLogin(path, data) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n\r\n        return await response.json()\r\n    }\r\n\r\n    async sendGet(path, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    async sendDelete(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json()\r\n    }\r\n\r\n\r\n}\r\n","import {Typography} from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst PageHeader = ({title}) => {\r\n\r\n    return (\r\n        <>\r\n\r\n            <Box sx={{ paddingTop: 2 }}>\r\n                <Typography fontSize={\"xx-large\"} sx={{ fontFamily: 'Garamond', color:'primary.main'}}>\r\n                    <strong>{title}</strong>\r\n                </Typography>\r\n                <br />\r\n            </Box>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n\r\n\r\n\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport {\r\n    Accordion,\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n    CircularProgress,\r\n    TextField,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport PageHeader from \"../components/PageHeader\";\r\n\r\nconst apiCaller = new ApiCaller();\r\n\r\n\r\nconst Home = () => {\r\n    const {login, createAccount, user} = useContext(AuthContext);\r\n    const [loading, setLoading] = useState(false);\r\n    const [nameTaken, setNameTaken] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        if(user!== null){\r\n            navigate(\"/web/overview\");\r\n        }\r\n    },[user])\r\n    const handleLogin = async () => {\r\n        setLoading(true);\r\n        if (await login(username, password) === true) {\r\n            navigate(`/web/overview`);\r\n        } else {\r\n            setLoading(false);\r\n            alert(\"Unable to log in\");\r\n        }\r\n    };\r\n\r\n    const handleCreateAccount = async () => {\r\n        setLoading(true);\r\n        const usernameExists = await apiCaller.sendPostNoLogin(\"user/userExists\", {username: newUsername});\r\n\r\n        if (!usernameExists) {\r\n            let account = await createAccount({\r\n                username: newUsername,\r\n                email,\r\n                password: newPassword,\r\n                passwordConfirm,\r\n                memberSince: \"\"\r\n            });\r\n            if (account === true) {\r\n                console.log(\"account created\")\r\n                navigate(`/web/overview`);\r\n            } else {\r\n                setLoading(false);\r\n                alert(\"Unable to create account\");\r\n            }\r\n        } else {\r\n            setNameTaken(true);\r\n            setLoading(false);\r\n        }\r\n\r\n    };\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [newUsername, setNewUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [passwordConfirm, setPasswordConfirm] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <PageHeader title={\"Listig\"}></PageHeader>\r\n\r\n            <Box sx={{\r\n                width: 300,\r\n                mx: 'auto',\r\n                mt: 4,\r\n                p: 2,\r\n                border: '1px solid #ccc',\r\n                borderRadius: 2,\r\n                boxShadow: 2,\r\n            }}>\r\n                <Accordion>\r\n                    <AccordionSummary sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <Box sx={{width: '100%', display: 'flex', justifyContent: 'center'}}>\r\n                            <h2>Login</h2>\r\n                        </Box>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"username\"\r\n                            label=\"Username\"\r\n                            variant=\"outlined\"\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                        {loading ? (\r\n                            <Box sx={{display: 'flex', justifyContent: 'center', mt: 4}}>\r\n                                <CircularProgress/>\r\n                            </Box>\r\n                        ) : (\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                sx={{mt: 1, p: 1}}\r\n                                onClick={handleLogin}\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                        )}\r\n\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            </Box>\r\n\r\n\r\n            <Box sx={{\r\n                width: 300,\r\n                mx: 'auto',\r\n                mt: 4,\r\n                p: 2,\r\n                border: '1px solid #ccc',\r\n                borderRadius: 2,\r\n                boxShadow: 2,\r\n            }}>\r\n                <Accordion>\r\n                    <AccordionSummary sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <Box sx={{width: '100%', display: 'flex', justifyContent: 'center'}}>\r\n                            <h2>Create Account</h2>\r\n                        </Box>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"new-username\"\r\n                            label=\"Username\"\r\n                            variant=\"outlined\"\r\n                            value={newUsername}\r\n                            onChange={(e) => setNewUsername(e.target.value)}\r\n                        />\r\n                        {nameTaken && (<Typography color={\"error\"}>Username unavailable.</Typography>)}\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"new-password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                        />\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"password-confirm\"\r\n                            label=\"Confirm Password\"\r\n                            type=\"password\"\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            value={passwordConfirm}\r\n                            onChange={(e) => setPasswordConfirm(e.target.value)}\r\n                        />\r\n\r\n\r\n                        {loading ? (\r\n                            <Box sx={{display: 'flex', justifyContent: 'center', mt: 4}}>\r\n                                <CircularProgress/>\r\n                            </Box>\r\n                        ) : (\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                sx={{mt: 1, p: 1}}\r\n                                onClick={handleCreateAccount}\r\n                            >\r\n                                Create Account\r\n                            </Button>\r\n                        )}\r\n\r\n\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["ApiCaller","constructor","baseUrl","BASE_URL","sendPost","path","data","loginDetails","response","fetch","this","method","headers","body","JSON","stringify","ok","console","log","json","errorResponse","Error","sendPostNoLogin","sendGet","sendDelete","_ref","title","_jsx","_Fragment","children","_jsxs","Box","sx","paddingTop","Typography","fontSize","fontFamily","color","apiCaller","Home","login","createAccount","user","useContext","AuthContext","loading","setLoading","useState","nameTaken","setNameTaken","navigate","useNavigate","useEffect","username","setUsername","password","setPassword","newUsername","setNewUsername","email","setEmail","newPassword","setNewPassword","passwordConfirm","setPasswordConfirm","PageHeader","width","mx","mt","p","border","borderRadius","boxShadow","Accordion","AccordionSummary","display","justifyContent","textAlign","AccordionDetails","TextField","fullWidth","id","label","variant","value","onChange","e","target","type","margin","CircularProgress","Button","onClick","async","alert","memberSince"],"sourceRoot":""}