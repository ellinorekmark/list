{"version":3,"file":"static/js/369.e214e151.chunk.js","mappings":"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","sources":["ApiCaller.js","components/BasicList.js","components/CheckListDisplay.js","components/ListDesc.js","components/PageHeader.js","components/HandleUsers.js","components/ViewOnlyUsers.js","components/EditListDetails.js","components/PublicListSettings.js","components/EditDialog.js","components/EditItems.js","components/AddItem.js","components/ViewerOptions.js","components/BulkAdd.js","components/ListDialog.js","components/ListOptions.js","components/ListDisplay.js","pages/ViewList.js"],"sourcesContent":["import {BASE_URL} from \"./constants\";\r\n\r\nexport class ApiCaller {\r\n\r\n\r\n    baseUrl = BASE_URL\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    async sendPost(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            console.log(await response.json())\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n        return  await response.json()\r\n    }\r\n    async sendPostNoLogin(path, data) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n\r\n        return await response.json()\r\n    }\r\n\r\n    async sendGet(path, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n    async sendGetNoAuth(path) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    async sendDelete(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json()\r\n    }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    IconButton,\r\n    Icon\r\n} from '@mui/material';\r\n\r\nconst BasicList = ({uList}) => {\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {uList.items.map((item) => (\r\n                    <ListItem\r\n                        key={item.id}\r\n                        sx={{\r\n                            cursor: 'pointer',\r\n                            border: '1px solid ',\r\n                            borderColor: 'primary.darker',\r\n                            marginTop: '5px',\r\n                            borderRadius: '5px',\r\n                        }}\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <Box>\r\n                            </Box>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={item.item}\r\n                            primaryTypographyProps={{fontSize: '18px'}}\r\n                        />\r\n                        <IconButton edge=\"end\">\r\n                            <Icon></Icon>\r\n                        </IconButton>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicList;\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    IconButton,\r\n    Icon\r\n} from '@mui/material';\r\n\r\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\nimport {AuthContext} from \"../AuthContext\";\r\n\r\nconst CheckListDisplay = ({ uList, updateList }) => {\r\n    const {user} = useContext(AuthContext);\r\n    const [editRights, setEditRights] = useState(() => {\r\n        return user.username === uList.owner || uList.editors.includes(user.username);\r\n    });\r\n\r\n    function getCheckStatus(status) {\r\n        switch (status) {\r\n            case '1':\r\n                return <CheckBoxIcon sx={{color:'secondary.main'}}/>;\r\n            default:\r\n                return <CheckBoxOutlineBlankIcon sx={{color:'secondary.main'}} />;\r\n        }\r\n    }\r\n\r\n    const handleItemClick = (itemId) => {\r\n        if(editRights){\r\n            const updatedItems = uList.items.map((item) =>\r\n                item.id === itemId\r\n                    ? { ...item, itemStatus: item.itemStatus === '1' ? '' : '1' }\r\n                    : item\r\n            );\r\n            updateList({ ...uList, items: updatedItems });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {uList.items.map((item) => (\r\n                    <ListItem\r\n                        key={item.id}\r\n                        sx={{\r\n                            cursor: 'pointer',\r\n                            border: '1px solid ',\r\n                            borderColor: 'primary.darker',\r\n                            marginTop: '5px',\r\n                            borderRadius: '5px',\r\n                        }}\r\n                        onClick={() => handleItemClick(item.id)}\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <Box>\r\n                                {getCheckStatus(item.itemStatus)}\r\n                            </Box>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={item.item}\r\n                            primaryTypographyProps={{ fontSize: '18px' }}\r\n                        />\r\n                        <IconButton edge=\"end\" >\r\n                            <Icon></Icon>\r\n                        </IconButton>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CheckListDisplay;\r\n","import React, {useContext} from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst ListDesc = ({uList}) => {\r\n\r\n    const description = () => {\r\n        if (uList.listInfo.listDesc !== null) {\r\n            return <>\r\n                <Box sx={{marginBottom: 1, gridRow: '1', gridColumn: \"1 / 2\", m: 1, paddingLeft: 2, paddingRight: 2}}>\r\n                    <Typography fontSize={\"large\"}>\r\n                        {uList.listInfo.listDesc}\r\n                        <br/>\r\n                    </Typography>\r\n                </Box>\r\n            </>\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {description()}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListDesc;\r\n\r\n","import {Typography} from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst PageHeader = ({title}) => {\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ paddingTop: 2, paddingRight:5, paddingLeft:5}}>\r\n                <Typography fontSize={\"xx-large\"} sx={{ fontFamily: 'Garamond', color:'primary.main'}}>\r\n                    <strong>{title}</strong>\r\n                </Typography>\r\n                <br />\r\n            </Box>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n\r\n\r\n\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Accordion, AccordionDetails, AccordionSummary,\r\n    FormControl, MenuItem, Select, TextField, Typography,\r\n    IconButton, Box, Button\r\n} from \"@mui/material\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\n\r\nconst apiCaller = new ApiCaller();\r\n\r\nfunction Spinner() {\r\n    return null;\r\n}\r\n\r\nconst HandleUsers = ({list, updateCopy}) => {\r\n    const {loginDetails} = useContext(AuthContext);\r\n    const [newUser, setNewUser] = useState(\"\");\r\n    const [newUserRole, setNewUserRole] = useState(\"VIEWER\");\r\n    const [userCheckLoading, setUserLoading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const editors = list.editors || [];\r\n    const viewers = list.viewers || [];\r\n\r\n    const handleRoleChange = (user, newRole) => {\r\n        let newEditors = [...editors];\r\n        let newViewers = [...viewers];\r\n\r\n        if (newRole === \"EDITOR\") {\r\n            newViewers = newViewers.filter(viewer => viewer !== user);\r\n            if (!newEditors.includes(user)) {\r\n                newEditors.push(user);\r\n            }\r\n        } else if (newRole === \"VIEWER\") {\r\n            newEditors = newEditors.filter(editor => editor !== user);\r\n            if (!newViewers.includes(user)) {\r\n                newViewers.push(user);\r\n            }\r\n        }\r\n\r\n        const newList = {\r\n            ...list,\r\n            editors: newEditors,\r\n            viewers: newViewers,\r\n        };\r\n\r\n        updateCopy(newList);\r\n    };\r\n\r\n\r\n    const handleRemoveUser = (user) => {\r\n        const newList = {\r\n            ...list,\r\n            editors: editors.filter((editor) => editor !== user),\r\n            viewers: viewers.filter((viewer) => viewer !== user),\r\n        };\r\n        updateCopy(newList);\r\n    };\r\n\r\n    const addUser = async () => {\r\n        setUserLoading(true);\r\n        setErrorMessage(\"\");\r\n\r\n        try {\r\n            const result = await apiCaller.sendPost(\"user/userExists\", {username: newUser}, loginDetails);\r\n\r\n            if (result === true) {\r\n                const newList = {\r\n                    ...list,\r\n                    editors: newUserRole === \"EDITOR\" ? [...editors, newUser] : editors,\r\n                    viewers: newUserRole === \"VIEWER\" ? [...viewers, newUser] : viewers,\r\n                };\r\n                setNewUser(\"\");\r\n                setNewUserRole(\"VIEWER\");\r\n                updateCopy(newList);\r\n            } else {\r\n                setErrorMessage(\"The username does not exist.\");\r\n            }\r\n        } catch (e) {\r\n            setErrorMessage(\"An error occurred while checking the username.\");\r\n        } finally {\r\n            setUserLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleNewUserRoleChange = (event) => {\r\n        setNewUserRole(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n                    {editors.length > 0 || viewers.length > 0 ? (\r\n                        <>\r\n                            {editors.map((user, index) => (\r\n                                <Box key={index} sx={{display: \"flex\", alignItems: \"center\", marginBottom: 1}}>\r\n                                    <Typography sx={{flexGrow: 1, marginLeft: 2}}>{user}</Typography>\r\n                                    <FormControl sx={{width: 100, marginRight: 2}}>\r\n                                        <Select\r\n                                            value=\"EDITOR\"\r\n                                            onChange={(e) => handleRoleChange(user, e.target.value)}\r\n                                        >\r\n                                            <MenuItem value=\"EDITOR\">Editor</MenuItem>\r\n                                            <MenuItem value=\"VIEWER\">Viewer</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    <IconButton onClick={() => handleRemoveUser(user)} color=\"error\">\r\n                                        <DeleteIcon/>\r\n                                    </IconButton>\r\n                                </Box>\r\n                            ))}\r\n                            {viewers.map((user, index) => (\r\n                                <Box key={index} sx={{display: \"flex\", alignItems: \"center\", marginBottom: 1}}>\r\n                                    <Typography sx={{flexGrow: 1, marginLeft: 2}}>{user}</Typography>\r\n                                    <FormControl sx={{width: 100, marginRight: 2}}>\r\n                                        <Select\r\n                                            value=\"VIEWER\"\r\n                                            onChange={(e) => handleRoleChange(user, e.target.value)}\r\n                                        >\r\n                                            <MenuItem value=\"EDITOR\">Editor</MenuItem>\r\n                                            <MenuItem value=\"VIEWER\">Viewer</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    <IconButton onClick={() => handleRemoveUser(user)} color=\"error\">\r\n                                        <DeleteIcon/>\r\n                                    </IconButton>\r\n                                </Box>\r\n                            ))}\r\n                        </>\r\n                    ) : (\r\n                        <Typography sx={{marginLeft: 2}}>\r\n                            List is currently private.\r\n                        </Typography>\r\n                    )}\r\n<br />\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    id=\"panel-header\"\r\n                    aria-controls=\"panel-content\"\r\n\r\n                >\r\n                    <Box sx={{width: '100%', display: 'flex', justifyContent: 'center'}}>\r\n                        <Typography fontSize={\"large\"}>Add User</Typography>\r\n                    </Box>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <FormControl sx={{maxWidth: 350, marginBottom: 2}}>\r\n                        <TextField\r\n                            inputProps={{maxLength: 50}}\r\n                            id=\"new-item\"\r\n                            label=\"Username\"\r\n                            variant=\"outlined\"\r\n                            value={newUser}\r\n                            onChange={(e) => setNewUser(e.target.value)}\r\n                            fullWidth\r\n                        />\r\n                    </FormControl>\r\n                    <Box sx={{display: \"flex\", justifyContent: \"space-between\", width: \"100%\", maxWidth: 350}}>\r\n                        <FormControl sx={{width: \"48%\"}}>\r\n                            <Select\r\n                                value={newUserRole}\r\n                                onChange={handleNewUserRoleChange}\r\n                                inputProps={{\r\n                                    name: \"role\",\r\n                                    id: \"uncontrolled-native\",\r\n                                }}\r\n                                sx={{width: \"100%\"}}\r\n                            >\r\n                                <MenuItem value={\"VIEWER\"}>Viewer</MenuItem>\r\n                                <MenuItem value={\"EDITOR\"}>Editor</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        {userCheckLoading ? (\r\n                            <Spinner/>\r\n                        ) : (\r\n                            <Button onClick={addUser} variant={\"outlined\"} sx={{height: \"56px\", width: \"48%\"}}>\r\n                                Add User\r\n                            </Button>\r\n                        )}\r\n\r\n                    </Box>\r\n                    <br/>\r\n                    <Typography color={\"error\"}> {errorMessage}</Typography>\r\n</AccordionDetails>\r\n</Accordion>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HandleUsers;\r\n","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\n\r\nconst ViewOnlyUsers = ({uList}) => {\r\n\r\n    return (\r\n        <>\r\n            <Box p={2}>\r\n                <Box sx={{display: 'flex'}}>\r\n                    <Typography fontSize={\"large\"} sx={{fontFamily: 'Garamond'}}\r\n                                minWidth={100}><strong>Owner: </strong></Typography>\r\n                    <Typography fontSize={\"large\"}>{uList.owner}</Typography>\r\n\r\n                </Box>\r\n                {!uList.editors || uList.editors.length !== 0 && (\r\n                    <Box sx={{display: 'flex'}} >\r\n                        <Typography fontSize={\"large\"} sx={{fontFamily: 'Garamond'}}\r\n                                    minWidth={100}><strong>Editors: </strong></Typography>\r\n                        <Box>\r\n                            {uList.editors.map((user) => (<Typography  key={user} fontSize={\"large\"}>{user}</Typography>))}\r\n                        </Box>\r\n                    </Box>\r\n\r\n                )}\r\n                {!uList.viewers || uList.viewers.length > 0 && (\r\n                    <Box sx={{display: 'flex'}}>\r\n                        <Typography fontSize={\"large\"} sx={{fontFamily: 'Garamond'}}\r\n                                    minWidth={100}><strong>Viewers: </strong></Typography>\r\n                        <Box>\r\n                            {uList.viewers.map((user) => (<Typography  key={user} fontSize={\"large\"}>{user}</Typography>))}\r\n                        </Box>\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewOnlyUsers;\r\n\r\n","import React, {useContext} from 'react';\r\nimport {\r\n    Accordion, AccordionDetails, AccordionSummary, Box,\r\n    FormControl, MenuItem, Select, TextField, Typography\r\n} from \"@mui/material\";\r\nimport HandleUsers from \"./HandleUsers\";\r\nimport ViewOnlyUsers from \"./ViewOnlyUsers\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nfunction PublicListSettings(props) {\r\n    return null;\r\n}\r\n\r\nPublicListSettings.propTypes = {};\r\nconst EditListDetails = ({list, updateCopy}) => {\r\n    const {user} = useContext(AuthContext);\r\n\r\n    const handleTypeChange = (event) => {\r\n        const newList = {\r\n            ...list,\r\n            listInfo: {\r\n                ...list.listInfo,\r\n                type: event.target.value,\r\n            },\r\n        };\r\n        updateCopy(newList);\r\n    };\r\n\r\n    const updateTitle = (value) => {\r\n        const newList = {\r\n            ...list,\r\n            listInfo: {\r\n                ...list.listInfo,\r\n                listName: value,\r\n            },\r\n        };\r\n        updateCopy(newList);\r\n    };\r\n\r\n    const updateDesc = (value) => {\r\n        const newList = {\r\n            ...list,\r\n            listInfo: {\r\n                ...list.listInfo,\r\n                listDesc: value,\r\n            },\r\n        };\r\n        updateCopy(newList);\r\n    };\r\n\r\n    return (\r\n        <>\r\n<br />\r\n                    <TextField\r\n                        inputProps={{maxLength: 100}}\r\n                        id=\"list-title\"\r\n                        label=\"Title\"\r\n                        variant=\"outlined\"\r\n                        value={list.listInfo.listName}\r\n                        onChange={(e) => updateTitle(e.target.value)}\r\n                        fullWidth\r\n                        sx={{marginBottom: 1}}\r\n                    />\r\n                    <TextField\r\n                        inputProps={{maxLength: 100}}\r\n                        id=\"list-desc\"\r\n                        label=\"Description (optional)\"\r\n                        variant=\"outlined\"\r\n                        value={list.listInfo.listDesc}\r\n                        onChange={(e) => updateDesc(e.target.value)}\r\n                        fullWidth\r\n                        sx={{marginBottom: 1}}\r\n                    />\r\n                    <FormControl>\r\n                        <Typography>List type:</Typography>\r\n                        <Select\r\n                            value={list.listInfo.type}\r\n                            onChange={handleTypeChange}\r\n                            sx={{\r\n                                width: 200,\r\n                                marginBottom: 2,\r\n                            }}\r\n                        >\r\n                            <MenuItem value={\"BASIC\"}>Normal</MenuItem>\r\n                            <MenuItem value={\"CHECK\"}>Checklist</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditListDetails;\r\n","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {Box, Button, Typography} from \"@mui/material\";\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport {BASE_URL_PUBLIC} from \"../constants\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst api = new ApiCaller()\r\nconst PublicListSettings = ({uList, updateList}) => {\r\n    const {loginDetails} = useContext(AuthContext);\r\n    const [isPublic, setPublic] = useState(false);\r\n    const [address, setAddress] = useState(\"\");\r\n    const [copied, setCopied] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const copyToClipboard = async () => {\r\n        try {\r\n            await navigator.clipboard.writeText(address);\r\n            setCopied(true);\r\n            setTimeout(() => setCopied(false), 2000);\r\n        } catch (err) {\r\n            console.error(\"Failed to copy text: \", err);\r\n        }\r\n    };\r\n\r\n    function createURL() {\r\n        if (uList.listInfo.uuid !== null) {\r\n            setAddress(BASE_URL_PUBLIC + uList.listInfo.uuid)\r\n        }\r\n        else{\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPublic(uList.listInfo.uuid !== null)\r\n        createURL();\r\n    }, [uList]);\r\n\r\n    const makePublic = async () => {\r\n        const updated = await api.sendPost(\"list/makePublic\", uList, loginDetails)\r\n        updateList(updated)\r\n    }\r\n    const makePrivate = async () => {\r\n        const updated = await api.sendPost(\"list/makePrivate\", uList, loginDetails)\r\n        updateList(updated)\r\n    }\r\n    const goToPublic = () => {\r\n        navigate(`/web/public/${uList.listInfo.uuid}`)\r\n    }\r\n    return (\r\n        <>\r\n            <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                height=\"100%\"\r\n            >\r\n            {isPublic ? (\r\n                <>\r\n                    <Typography>List is <strong>Public</strong></Typography>\r\n                    <br />\r\n                    <Typography>Share the link with anyone to let them view your list.</Typography>\r\n                    <br />\r\n                    <Button sx={{m:1}} variant=\"outlined\" fullWidth onClick={copyToClipboard}>\r\n                        {copied ? \"Link Copied!\" : \"Copy Link\"}\r\n                    </Button>\r\n                    <Button sx={{m:1}} variant=\"outlined\" fullWidth onClick={goToPublic}>\r\n                        Go to Public List\r\n                    </Button>\r\n\r\n\r\n                    <Button sx={{m:1}} variant=\"outlined\" fullWidth onClick={makePrivate}>\r\n                        Make private\r\n                    </Button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <Typography>List is <strong>Private</strong>\r\n                    <br /> Only you and those you invite are able to access the list.</Typography><br />\r\n                    <Button sx={{m:1}} variant=\"outlined\" fullWidth onClick={makePublic}>\r\n                    Make public\r\n                </Button><br />\r\n                    <Typography>Make the list public to be able to share your list with anyone who has the link to\r\n                        it.</Typography>\r\n\r\n\r\n                </>\r\n            )}\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PublicListSettings;\r\n\r\n\r\n\r\n\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    Box,\r\n    IconButton,\r\n    Button,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Dialog,\r\n    AccordionSummary,\r\n    Accordion,\r\n    AccordionDetails\r\n} from '@mui/material';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport EditListDetails from \"./EditListDetails\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport PageHeader from \"./PageHeader\";\r\nimport PublicListSettings from \"./PublicListSettings\";\r\n\r\nconst apiCaller = new ApiCaller()\r\nconst EditDialog = ({uList, updateList}) => {\r\n    const {loginDetails, user} = useContext(AuthContext);\r\n    const [dialog, setDialog] = useState(false);\r\n    const [listCopy, setCopy] = useState({...uList})\r\n    const [isOwner, setIsOwner] = useState(false)\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        setIsOwner(ownsList)\r\n    }, [user]);\r\n\r\n    function openDialog() {\r\n        setDialog(true);\r\n    }\r\n\r\n    function closeDialog() {\r\n        setDialog(false);\r\n    }\r\n\r\n    function ownsList() {\r\n        return uList.owner === user.username;\r\n    }\r\n\r\n\r\n    function saveAndClose() {\r\n        let deletedEditors = [];\r\n        let deletedViewers = [];\r\n\r\n        if (uList.editors !== listCopy.editors) {\r\n            deletedEditors = uList.editors.filter(editor => !listCopy.editors.includes(editor));\r\n        }\r\n\r\n        if (uList.viewers !== listCopy.viewers) {\r\n            deletedViewers = uList.viewers.filter(viewer => !listCopy.viewers.includes(viewer));\r\n        }\r\n\r\n        const deletedUsers = deletedEditors.concat(deletedViewers)\r\n\r\n        deletedUsers.forEach(user => {\r\n            apiCaller.sendPost(\"list/removeUser\", {user: user, listId: uList.listInfo.id}, loginDetails)\r\n        });\r\n        updateList(listCopy)\r\n        setDialog(false);\r\n    }\r\n\r\n    async function deleteList() {\r\n        await apiCaller.sendDelete(\"list\", uList.listInfo.id, loginDetails)\r\n        setDialog(false)\r\n        navigate(`/web/overview`);\r\n    }\r\n\r\n    function updateCopy(newCopy) {\r\n        setCopy(newCopy)\r\n    }\r\n    async function leaveList() {\r\n        await apiCaller.sendPost(\"list/removeUser\", {user: user.username, listId: uList.listInfo.id}, loginDetails)\r\n        setDialog(false)\r\n        navigate(`/web/overview`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <IconButton variant=\"outlined\" onClick={openDialog} sx={{color: 'secondary.main'}}>\r\n                <EditIcon />\r\n            </IconButton>\r\n\r\n            <Dialog\r\n                fullScreen\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n            >\r\n                <DialogTitle textAlign={'center'}>\r\n                    <PageHeader title={\"Edit List\"}></PageHeader>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Box maxWidth={400} sx={{\r\n                        mx: 'auto',\r\n                        cursor: 'pointer',\r\n                        border: '1px solid ',\r\n                        borderColor: 'primary.darker',\r\n                        marginTop: '5px',\r\n                        borderRadius: '5px',\r\n                    }} variant=\"contained\">\r\n\r\n                        <EditListDetails list={listCopy} updateCopy={updateCopy}></EditListDetails>\r\n                        {isOwner ? (<>\r\n                                <PublicListSettings uList={uList} updateList={updateList}></PublicListSettings>\r\n                            <Accordion>\r\n                                <AccordionSummary id=\"panel-header\" aria-controls=\"panel-content\"\r\n                                                  sx={{backgroundColor: \"primary.main\"}} >\r\n                                    <Box sx={{width: '100%', display: 'flex', justifyContent: 'center'}}>\r\n                                        <Typography p={1} fontSize={\"large\"}>Delete list</Typography>\r\n                                    </Box>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails sx={{justifyContent: 'center'}}>\r\n                                    <Typography textAlign={'center'} p={1}>Warning: <br/>Deleting a list cannot be\r\n                                        reversed.</Typography>\r\n                                    <Button onClick={deleteList} variant={\"contained\"} sx={{padding: 2}}\r\n                                            color={\"warning\"} fullWidth >Delete list</Button>\r\n                                </AccordionDetails>\r\n                            </Accordion></>\r\n                        ): (\r\n                            <Accordion>\r\n                                <AccordionSummary id=\"panel-header\" aria-controls=\"panel-content\"\r\n                                                  sx={{backgroundColor: \"primary.darker\"}}>\r\n                                    <Box sx={{width: '100%', display: 'flex', justifyContent: 'center'}}>\r\n                                        <Typography p={1} fontSize={\"large\"}>Leave</Typography>\r\n                                    </Box>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails sx={{justifyContent: 'center'}}>\r\n                                    <Typography textAlign={'center'} p={1}>Warning: <br/>If you want to come back, the owner\r\n                                        will have to add you again.</Typography>\r\n                                    <Button onClick={leaveList} variant={\"contained\"} sx={{padding: 2}}\r\n                                            color={\"warning\"} fullWidth>Leave list</Button>\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        )}\r\n\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions sx={{justifyContent: 'center'}}>\r\n                    <Button onClick={closeDialog} variant=\"contained\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={saveAndClose} variant=\"contained\">\r\n                        Save Changes\r\n                    </Button>\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditDialog;\r\n","import React, {useContext} from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport {DragDropContext, Draggable, Droppable} from \"@hello-pangea/dnd\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport {DragIndicator} from '@mui/icons-material';\r\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\n\r\nconst api = new ApiCaller()\r\n\r\nconst EditItems = ({uList, updateList}) => {\r\n    const {loginDetails} = useContext(AuthContext);\r\n\r\n\r\n    const handleDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        const startIndex = result.source.index;\r\n        const endIndex = result.destination.index;\r\n        const copyList = [...uList.items];\r\n        const [reorderItem] = copyList.splice(startIndex, 1);\r\n        copyList.splice(endIndex, 0, reorderItem);\r\n        copyList.forEach((item, index) => {\r\n            item.itemOrder = index + 1;\r\n        });\r\n        uList.items = copyList;\r\n        updateList(uList);\r\n    };\r\n\r\n\r\n    const removeItem = async (item) => {\r\n        const updated = await api.sendDelete(\"list/item\", item, loginDetails)\r\n\r\n        updateList(updated);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                <DragDropContext onDragEnd={handleDragEnd}>\r\n                    <Droppable droppableId=\"items\">\r\n                        {(droppableProvider) => (\r\n                            <Box\r\n                                ref={droppableProvider.innerRef}\r\n                                {...droppableProvider.droppableProps}\r\n                            >\r\n                                {uList.items.map((item, index) => (\r\n                                    <Draggable\r\n                                        index={index}\r\n                                        key={item.id}\r\n                                        draggableId={item.id + \"\"}\r\n                                    >\r\n                                        {(draggableProvider) => (\r\n                                            <ListItem\r\n                                                ref={draggableProvider.innerRef}\r\n                                                {...draggableProvider.draggableProps}\r\n                                                {...draggableProvider.dragHandleProps}\r\n                                                sx={{\r\n                                                    cursor: 'pointer',\r\n                                                    border: '1px solid ',\r\n                                                    borderColor: 'primary.darker',\r\n                                                    marginTop: '5px',\r\n                                                    borderRadius: '5px',\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    justifyContent: 'space-between',\r\n\r\n                                                }}\r\n                                            >\r\n                                                <ListItemAvatar>\r\n                                                    <Box>\r\n                                                        <DragIndicator/>\r\n                                                    </Box>\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText primary={item.item}\r\n                                                              primaryTypographyProps={{fontSize: '18px'}}/>\r\n                                                <IconButton edge=\"end\" aria-label=\"delete\"\r\n                                                            onClick={() => removeItem(item)}>\r\n                                                    <ClearIcon/>\r\n                                                </IconButton>\r\n                                            </ListItem>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {droppableProvider.placeholder}\r\n                            </Box>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditItems;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Accordion,\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nconst AddItem = ({ uList, updateList }) => {\r\n    const [newItem, setItem] = useState('');\r\n    const [bulkItems, setBulkItems] = useState('');\r\n    const textRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        addOne();\r\n    };\r\n\r\n    function addToList(i, updatedList) {\r\n        const newItemObj = {\r\n            listId: uList.listInfo.id,\r\n            item: i,\r\n            itemOrder: updatedList.items.length + 1\r\n        };\r\n\r\n        return {\r\n            ...updatedList,\r\n            items: [...updatedList.items, newItemObj]\r\n        };\r\n    }\r\n\r\n    const addOne = () => {\r\n        if (newItem.trim() === '') return;\r\n\r\n        let updatedList = addToList(newItem, uList);\r\n        updateList(updatedList);\r\n\r\n        setItem('');\r\n        textRef.current.focus();\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', mt: 2 }}>\r\n                    <TextField\r\n                        inputProps={{ maxLength: 200 }}\r\n                        id=\"new-item\"\r\n                        label=\"Add to List\"\r\n                        variant=\"outlined\"\r\n                        value={newItem}\r\n                        onChange={(e) => setItem(e.target.value)}\r\n                        fullWidth\r\n                        sx={{ height: '56px', }}\r\n                        inputRef={textRef}\r\n                        InputProps={{\r\n                            sx: {\r\n                                borderTopRightRadius: 0,\r\n                                borderBottomRightRadius: 0,\r\n                                '& .MuiOutlinedInput-notchedOutline': {\r\n                                    borderTopRightRadius: 0,\r\n                                    borderBottomRightRadius: 0,\r\n                                },\r\n                                height: '56px',\r\n                                borderColor: 'primary.darker',\r\n                            },\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        variant=\"outlined\"\r\n                        sx={{\r\n                            borderTopLeftRadius: 0,\r\n                            borderBottomLeftRadius: 0,\r\n                            height: '56px',\r\n                            minWidth: '56px',\r\n                        }}\r\n                    >\r\n                        <AddIcon />\r\n                    </Button>\r\n                </Box>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddItem;\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Box,\r\n    IconButton,\r\n    Button,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Dialog,\r\n    AccordionSummary,\r\n    Accordion,\r\n    AccordionDetails\r\n} from '@mui/material';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport ViewOnlyUsers from \"./ViewOnlyUsers\";\r\n\r\nconst apiCaller = new ApiCaller()\r\n\r\n\r\nconst ViewerOptions = ({uList}) => {\r\n    const {loginDetails, user} = useContext(AuthContext);\r\n    const [dialog, setDialog] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n\r\n    function openDialog() {\r\n        setDialog(true);\r\n    }\r\n\r\n    function closeDialog() {\r\n        setDialog(false);\r\n    }\r\n\r\n    async function leaveList() {\r\n        await apiCaller.sendPost(\"list/removeUser\", {user: user.username, listId: uList.listInfo.id}, loginDetails)\r\n        setDialog(false)\r\n        navigate(`/web/overview`);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <IconButton variant=\"outlined\" onClick={openDialog} sx={{color: 'secondary.main'}}>\r\n                <InfoIcon />\r\n            </IconButton>\r\n\r\n            <Dialog\r\n                fullScreen\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n            >\r\n                <DialogTitle><Box sx={{paddingTop: 2}}>\r\n                    <Typography fontSize={\"xx-large\"} sx={{fontFamily: 'Garamond', textAlign: 'center'}}>\r\n                        List Info\r\n                    </Typography>\r\n                </Box></DialogTitle>\r\n                <DialogContent>\r\n                    <Box maxWidth={400} sx={{\r\n                        mx: 'auto',\r\n                        border: '1px solid ',\r\n                        borderColor: 'primary.darker',\r\n                        marginTop: '5px',\r\n                        borderRadius: '5px',\r\n                    }} variant=\"contained\">\r\n\r\n                        <ViewOnlyUsers uList={uList}></ViewOnlyUsers>\r\n\r\n                        <Accordion>\r\n                            <AccordionSummary id=\"panel-header\" aria-controls=\"panel-content\"\r\n                                              sx={{backgroundColor: \"primary.main\"}}>\r\n                                <Box sx={{width: '100%', display: 'flex', justifyContent: 'center'}}>\r\n                                    <Typography p={1} fontSize={\"large\"}>Leave</Typography>\r\n                                </Box>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails sx={{justifyContent: 'center'}}>\r\n                                <Typography textAlign={'center'} p={1}>Warning: <br/>If you want to come back, the owner\r\n                                    will have to add you again.</Typography>\r\n                                <Button onClick={leaveList} variant={\"contained\"} sx={{padding: 2}}\r\n                                        color={\"error\"} fullWidth>Leave list</Button>\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                        \r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions sx={{justifyContent: 'center'}}>\r\n                    <Button onClick={closeDialog} variant=\"contained\">\r\n                        Close\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewerOptions;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Typography\r\n} from \"@mui/material\";\r\n\r\nconst BulkAdd = ({ uList, updateList }) => {\r\n    const [bulkItems, setBulkItems] = useState('');\r\n    const [added, setAdded] = useState(0);\r\n    const textRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    function addToList(i, updatedList) {\r\n        const newItemObj = {\r\n            listId: uList.listInfo.id,\r\n            item: i,\r\n            itemOrder: updatedList.items.length + 1\r\n        };\r\n\r\n        return {\r\n            ...updatedList,\r\n            items: [...updatedList.items, newItemObj]\r\n        };\r\n    }\r\n\r\n    function bulkAdd() {\r\n        let updatedList = { ...uList };\r\n\r\n        const items = bulkItems.split(/\\r?\\n/);\r\n        let count = 0;\r\n        items.forEach(i => {\r\n            if (i.trim() !== '') {\r\n                updatedList = addToList(i, updatedList);\r\n                count++;\r\n            }\r\n        });\r\n\r\n        updateList(updatedList);\r\n        setBulkItems('');\r\n        setAdded(count);\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n                    <Typography fontSize={\"small\"} sx={{ paddingBottom: 1 }}>\r\n                        Separate items by new line.\r\n                    </Typography>\r\n                    <TextField\r\n                        inputProps={{ maxLength: 200 }}\r\n                        id=\"bulk-add\"\r\n                        label=\"Bulk add\"\r\n                        variant=\"outlined\"\r\n                        value={bulkItems}\r\n                        onChange={(e) => setBulkItems(e.target.value)}\r\n                        fullWidth\r\n                        multiline\r\n                        minRows={3}\r\n                        InputProps={{\r\n                            sx: {\r\n                                height: '112px',\r\n                                borderColor: 'primary.darker',\r\n                            },\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        p={1}\r\n                        fullWidth\r\n                        onClick={bulkAdd}>Add items</Button>\r\n            {added >0  && (<Typography> {added} items added to list.</Typography>)}\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BulkAdd;\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    Button,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Dialog,\r\n} from '@mui/material';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport EditListDetails from \"./EditListDetails\";\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport PublicListSettings from \"./PublicListSettings\";\r\nimport HandleUsers from \"./HandleUsers\";\r\nimport ViewOnlyUsers from \"./ViewOnlyUsers\";\r\nimport BulkAdd from \"./BulkAdd\";\r\n\r\nconst apiCaller = new ApiCaller()\r\nconst ListDialog = ({uList, updateList, dialog, setDialog, option}) => {\r\n    const {loginDetails, user} = useContext(AuthContext);\r\n    const [listCopy, setCopy] = useState({...uList})\r\n    const [canSave, setCanSave] = useState(true)\r\n    const navigate = useNavigate();\r\n\r\n\r\n    useEffect(() => {\r\n        const saveCheck = () => {\r\n            const saveOptions = [\"manageUsers\", \"editListInfo\",]\r\n            return saveOptions.includes(option);\r\n        }\r\n        setCanSave(saveCheck())\r\n    }, [option]);\r\n\r\n    function closeDialog() {\r\n        setDialog(false);\r\n    }\r\n\r\n    function deleteUsers() {\r\n        let deletedEditors = [];\r\n        let deletedViewers = [];\r\n        if (uList.editors !== listCopy.editors) {\r\n            deletedEditors = uList.editors.filter(editor => !listCopy.editors.includes(editor));\r\n        }\r\n        if (uList.viewers !== listCopy.viewers) {\r\n            deletedViewers = uList.viewers.filter(viewer => !listCopy.viewers.includes(viewer));\r\n        }\r\n        const deletedUsers = deletedEditors.concat(deletedViewers)\r\n        deletedUsers.forEach(user => {\r\n            apiCaller.sendPost(\"list/removeUser\", {user: user, listId: uList.listInfo.id}, loginDetails)\r\n        });\r\n    }\r\n\r\n    function saveAndClose() {\r\n        if (option === \"manageUsers\") {\r\n            deleteUsers();\r\n        }\r\n        updateList(listCopy)\r\n        setDialog(false);\r\n    }\r\n\r\n    function getOption() {\r\n        switch (option) {\r\n            case \"manageUsers\":\r\n                return <><HandleUsers list={listCopy} updateCopy={setCopy}></HandleUsers></>\r\n            case \"editListInfo\":\r\n                return <><EditListDetails list={listCopy} updateCopy={setCopy}></EditListDetails></>\r\n            case \"deleteList\":\r\n                return deleteDialog()\r\n            case \"leaveList\":\r\n                return leaveDialog()\r\n            case \"userInfo\":\r\n                return <><ViewOnlyUsers uList={listCopy}></ViewOnlyUsers></>\r\n            case \"bulkAdd\":\r\n                return <><BulkAdd uList={uList} updateList={updateList}></BulkAdd></>\r\n            case \"publicSettings\":\r\n                return <><PublicListSettings uList={uList} updateList={updateList}></PublicListSettings></>\r\n        }\r\n    }\r\n\r\n    function getTitle() {\r\n        switch (option) {\r\n            case \"manageUsers\":\r\n                return \"Manage Users\"\r\n            case \"editListInfo\":\r\n                return \"Edit Info\"\r\n            case \"deleteList\":\r\n                return \"Delete List\"\r\n            case \"leaveList\":\r\n                return \"Leave List\"\r\n            case \"userInfo\":\r\n                return \"Users\"\r\n            case \"bulkAdd\":\r\n                return \"Add Multiple Items\"\r\n            case \"publicSettings\":\r\n                return \"Public List Settings\"\r\n        }\r\n    }\r\n\r\n    function deleteDialog() {\r\n        return <><Typography textAlign={'center'} p={1}>Warning: <br/>Deleting a list cannot be\r\n            reversed.</Typography>\r\n            <Button onClick={deleteList} variant={\"contained\"} sx={{padding: 2}}\r\n                    color={\"warning\"} fullWidth>Delete list</Button></>\r\n    }\r\n\r\n    async function deleteList() {\r\n        await apiCaller.sendDelete(\"list\", uList.listInfo.id, loginDetails)\r\n        setDialog(false)\r\n        navigate(`/web/overview`);\r\n    }\r\n\r\n    function leaveDialog() {\r\n        return <> <Typography textAlign={'center'} p={1}>Warning: <br/>If you want to come back, the owner\r\n            will have to add you again.</Typography>\r\n            <Button onClick={leaveList} variant={\"contained\"} sx={{padding: 2}}\r\n                    color={\"warning\"} fullWidth>Leave list</Button></>\r\n    }\r\n\r\n    async function leaveList() {\r\n        await apiCaller.sendPost(\"list/removeUser\", {user: user.username, listId: uList.listInfo.id}, loginDetails)\r\n        setDialog(false)\r\n        navigate(`/web/overview`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n            >\r\n                <DialogTitle textAlign={'center'}>\r\n                    {getTitle()}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {getOption()}\r\n\r\n                </DialogContent>\r\n                <DialogActions sx={{justifyContent: 'center'}}>\r\n                    <Button onClick={closeDialog} variant=\"contained\">\r\n                        Close\r\n                    </Button>\r\n\r\n                    {canSave && (<Button onClick={saveAndClose} variant=\"contained\">\r\n                        Save Changes\r\n                    </Button>)}\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListDialog;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Button, IconButton, Menu, MenuItem } from '@mui/material';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport { AuthContext } from '../AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ListDialog from './ListDialog';\r\n\r\nconst ListOptions = ({ uList, updateList }) => {\r\n    const { user } = useContext(AuthContext);\r\n    const navigate = useNavigate();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [isPublic, setIsPublic] = useState(false);\r\n    const [dialogOption, setDialogOption] = useState(null);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsPublic(uList.listInfo.uuid !== null);\r\n    }, [uList]);\r\n\r\n    const handleMenuClick = (event) => setAnchorEl(event.currentTarget);\r\n    const handleMenuClose = () => setAnchorEl(null);\r\n\r\n    const openDialog = (option) => {\r\n        setDialogOption(option);\r\n        setDialogOpen(true);\r\n        handleMenuClose();\r\n    };\r\n\r\n    const renderMenuItems = () => {\r\n        const commonItems = [\r\n            { text: 'User Information', action: () => openDialog('userInfo'), roles: ['viewers'] },\r\n            { text: 'Bulk Add Items', action: () => openDialog('bulkAdd'), roles: ['owner', 'editors'] },\r\n            { text: 'Edit List Information', action: () => openDialog('editListInfo'), roles: ['owner', 'editors'] },\r\n            { text: 'Go to Public Page', action: () => navigate(`/web/public/${uList.listInfo.uuid}`), roles: ['viewers', 'editors'], condition: isPublic },\r\n            { text: 'Leave List', action: () => openDialog('leaveList'), roles: ['viewers', 'editors'] },\r\n            { text: 'Handle Users', action: () => openDialog('manageUsers'), roles:['owner'] },\r\n            { text: 'Edit Public Settings', action: () => openDialog('publicSettings'), roles:['owner'] },\r\n            { text: 'Delete List', action: () => openDialog('deleteList'), roles: ['owner'] }\r\n        ];\r\n\r\n\r\n        const ownerItems = commonItems.filter(item => item.roles.includes('owner'));\r\n        const editorItems = commonItems.filter(item => item.roles.includes('editors'));\r\n        const viewerItems = commonItems.filter(item => item.roles.includes('viewers'));\r\n\r\n        if (uList.owner === user.username) {\r\n            return ownerItems;\r\n        } else if (uList.editors !== null && uList.editors.includes(user.username)) {\r\n            return editorItems;\r\n        } else if (uList.viewers !== null && uList.viewers.includes(user.username)) {\r\n            return viewerItems;\r\n        }\r\n\r\n        return [];\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <IconButton\r\n                sx={{ position: 'sticky', top: 0, right: 0, color: 'primary.lighter', fontSize: 'large' }}\r\n                id=\"basic-button\"\r\n                aria-controls={Boolean(anchorEl) ? 'basic-menu' : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={Boolean(anchorEl) ? 'true' : undefined}\r\n                onClick={handleMenuClick}\r\n            >\r\n                <MoreVertIcon />\r\n            </IconButton>\r\n\r\n            <Menu\r\n                id=\"basic-menu\"\r\n                anchorEl={anchorEl}\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleMenuClose}\r\n                MenuListProps={{ 'aria-labelledby': 'basic-button' }}\r\n            >\r\n                {renderMenuItems().map(({ text, action, condition = true }) =>\r\n                    condition && <MenuItem key={text} onClick={action}>{text}</MenuItem>\r\n                )}\r\n            </Menu>\r\n\r\n            <ListDialog\r\n                uList={uList}\r\n                updateList={updateList}\r\n                dialog={dialogOpen}\r\n                setDialog={setDialogOpen}\r\n                option={dialogOption}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListOptions;\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Box, IconButton\r\n} from '@mui/material';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport LockOpenIcon from \"@mui/icons-material/LockOpen\";\r\nimport EditDialog from \"./EditDialog\";\r\nimport CheckListDisplay from \"./CheckListDisplay\";\r\nimport BasicList from \"./BasicList\";\r\nimport GroupIcon from \"@mui/icons-material/Group\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport EditItems from \"./EditItems\";\r\nimport AddItem from \"./AddItem\";\r\nimport ViewerOptions from \"./ViewerOptions\";\r\nimport PageHeader from \"./PageHeader\";\r\nimport ListOptions from \"./ListOptions\";\r\nimport ListDesc from \"./ListDesc\";\r\n\r\n\r\nconst ListDisplay = ({uList, updateList}) => {\r\n    const {user} = useContext(AuthContext);\r\n    const [locked, setLocked] = useState(true);\r\n    const [editRights, setEditRights] = useState(() => {\r\n        return user.username === uList.owner || uList.editors.includes(user.username);\r\n    });\r\n\r\n    const toggleLocked = () => {\r\n        setLocked(!locked);\r\n    };\r\n\r\n    function getListType(type) {\r\n        switch (type.listInfo.type) {\r\n            case 'CHECK':\r\n                return <CheckListDisplay uList={uList} updateList={updateList}/>;\r\n            default:\r\n                return <BasicList uList={uList}/>;\r\n        }\r\n    }\r\n\r\n    const users = () => {\r\n        if (uList.owner === user.username && uList.editors.length === 0 && uList.viewers.length === 0) {\r\n            return <></>\r\n        } else {\r\n            const editorsAndViewers = [...uList.editors, ...uList.viewers].join(\", \");\r\n            const allUsers = uList.owner + \", \" + editorsAndViewers\r\n\r\n            return (\r\n                <>\r\n                    <GroupIcon sx={{verticalAlign: 'middle', mr: 1}}/>\r\n                    {allUsers}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box maxWidth={750} sx={{mx: 'auto'}} variant=\"contained\">\r\n\r\n\r\n                <Box>\r\n\r\n                    <PageHeader title={uList.listInfo.listName}></PageHeader>\r\n\r\n                    <ListDesc uList={uList}></ListDesc>\r\n\r\n                    <Typography sx={{gridRow: '2', gridColumn: '1 / 3', textAlign: 'left', p: 1}}>\r\n                        {users()}\r\n                    </Typography>\r\n\r\n                </Box>\r\n                <Box sx={{\r\n                    border: '1px solid ',\r\n                    borderColor: 'primary.darker'\r\n                }}>\r\n                    <Box sx={{backgroundColor: \"primary.darker\", display: 'flex', justifyContent: 'flex-end',}}>\r\n                        {editRights && (\r\n                            <IconButton variant=\"outlined\" onClick={toggleLocked}>\r\n                                {locked ? <LockIcon sx={{color: 'primary.lighter'}}/> :\r\n                                    <LockOpenIcon sx={{color: 'primary.lighter'}}/>}\r\n                            </IconButton>\r\n                        )}\r\n                        <ListOptions uList={uList} updateList={updateList}></ListOptions>\r\n                    </Box>\r\n\r\n\r\n                    {locked ? (\r\n                        <Box>{getListType(uList)}</Box>\r\n                    ) : (\r\n                        <EditItems uList={uList} updateList={updateList}/>\r\n                    )}\r\n\r\n                    {editRights && (<AddItem uList={uList} updateList={updateList}></AddItem>)}\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListDisplay;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Box, CircularProgress, Typography } from '@mui/material';\r\nimport { AuthContext } from \"../AuthContext\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport { ApiCaller } from \"../ApiCaller\";\r\nimport ListDisplay from \"../components/ListDisplay\";\r\nimport { BASE_URL_SOCKET } from \"../constants\";\r\n\r\nconst apiCaller = new ApiCaller();\r\n\r\nconst ViewList = () => {\r\n    const { id } = useParams();\r\n    const { loginDetails } = useContext(AuthContext);\r\n    const [loading, setLoading] = useState(true);\r\n    const [uList, setList] = useState(null);\r\n    const [stompClient, setStompClient] = useState(null);\r\n    const [fetchError, setFetchError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchList = async () => {\r\n            try {\r\n                const data = await apiCaller.sendGet(`list/${id}`, loginDetails);\r\n                setList(data);\r\n            } catch (error) {\r\n                setFetchError(true);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchList();\r\n\r\n        const socket = new SockJS(BASE_URL_SOCKET);\r\n        const client = new Client({\r\n            webSocketFactory: () => socket,\r\n            onConnect: () => {\r\n                console.log('Connected to WebSocket');\r\n                client.subscribe(`/topic/list/${id}`, (message) => {\r\n                    const updatedList = JSON.parse(message.body);\r\n                    setList(updatedList);\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error('Broker reported error: ' + frame.headers['message']);\r\n                console.error('Additional details: ' + frame.body);\r\n            }\r\n        });\r\n\r\n        client.activate();\r\n        setStompClient(client);\r\n\r\n        return () => {\r\n            if (client && client.connected) {\r\n                client.deactivate();\r\n            }\r\n        };\r\n    }, [id, loginDetails]);\r\n\r\n    const updateList = (newList) => {\r\n\r\n        if (stompClient && stompClient.connected) {\r\n            stompClient.publish({\r\n                destination: `/app/list/${id}`,\r\n                body: JSON.stringify(newList)\r\n            });\r\n            console.log(\"Sent update to WebSocket\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <Box>\r\n                    <CircularProgress />\r\n                    <Typography>Loading List</Typography>\r\n                </Box>\r\n            ) : (\r\n                <>\r\n                    {fetchError ? (\r\n                        <Typography>Unable to load list.</Typography>\r\n                    ) : (\r\n                        <ListDisplay uList={uList} updateList={updateList} />\r\n                    )}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewList;\r\n"],"names":["ApiCaller","constructor","baseUrl","BASE_URL","sendPost","path","data","loginDetails","response","fetch","this","method","headers","body","JSON","stringify","ok","console","log","json","errorResponse","Error","sendPostNoLogin","sendGet","sendGetNoAuth","sendDelete","_ref","uList","_jsx","_Fragment","children","List","items","map","item","_jsxs","ListItem","sx","cursor","border","borderColor","marginTop","borderRadius","ListItemAvatar","Box","ListItemText","primary","primaryTypographyProps","fontSize","IconButton","edge","Icon","id","updateList","user","useContext","AuthContext","editRights","setEditRights","useState","username","owner","editors","includes","onClick","itemId","updatedItems","itemStatus","handleItemClick","status","CheckBoxIcon","color","CheckBoxOutlineBlankIcon","description","listInfo","listDesc","marginBottom","gridRow","gridColumn","m","paddingLeft","paddingRight","Typography","title","paddingTop","fontFamily","apiCaller","Spinner","list","updateCopy","newUser","setNewUser","newUserRole","setNewUserRole","userCheckLoading","setUserLoading","errorMessage","setErrorMessage","viewers","handleRoleChange","newRole","newEditors","newViewers","filter","viewer","push","editor","newList","handleRemoveUser","length","index","display","alignItems","flexGrow","marginLeft","FormControl","width","marginRight","Select","value","onChange","e","target","MenuItem","DeleteIcon","Accordion","AccordionSummary","justifyContent","AccordionDetails","maxWidth","TextField","inputProps","maxLength","label","variant","fullWidth","event","name","Button","async","height","p","minWidth","listName","updateTitle","updateDesc","type","api","isPublic","setPublic","address","setAddress","copied","setCopied","navigate","useNavigate","useEffect","uuid","BASE_URL_PUBLIC","createURL","flexDirection","navigator","clipboard","writeText","setTimeout","err","error","goToPublic","concat","updated","DragDropContext","onDragEnd","result","destination","startIndex","source","endIndex","copyList","reorderItem","splice","forEach","itemOrder","Droppable","droppableId","droppableProvider","ref","innerRef","droppableProps","Draggable","draggableId","draggableProvider","draggableProps","dragHandleProps","DragIndicator","removeItem","ClearIcon","placeholder","newItem","setItem","bulkItems","setBulkItems","textRef","useRef","addOne","trim","updatedList","i","newItemObj","listId","addToList","current","focus","onSubmit","preventDefault","mt","inputRef","InputProps","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","AddIcon","added","setAdded","paddingBottom","multiline","minRows","split","count","dialog","setDialog","option","listCopy","setCopy","canSave","setCanSave","closeDialog","deleteList","leaveList","Dialog","open","onClose","DialogTitle","textAlign","getTitle","DialogContent","HandleUsers","EditListDetails","padding","ViewOnlyUsers","BulkAdd","PublicListSettings","getOption","DialogActions","deletedEditors","deletedViewers","deleteUsers","anchorEl","setAnchorEl","setIsPublic","dialogOption","setDialogOption","dialogOpen","setDialogOpen","handleMenuClose","openDialog","position","top","right","Boolean","undefined","currentTarget","MoreVertIcon","Menu","MenuListProps","renderMenuItems","commonItems","text","action","roles","condition","ownerItems","editorItems","viewerItems","_ref2","ListDialog","locked","setLocked","mx","PageHeader","ListDesc","users","editorsAndViewers","join","allUsers","GroupIcon","verticalAlign","mr","backgroundColor","toggleLocked","LockIcon","LockOpenIcon","ListOptions","CheckListDisplay","BasicList","EditItems","AddItem","ViewList","useParams","loading","setLoading","setList","stompClient","setStompClient","fetchError","setFetchError","fetchList","socket","SockJS","BASE_URL_SOCKET","client","Client","webSocketFactory","onConnect","subscribe","message","parse","onStompError","frame","activate","connected","deactivate","CircularProgress","ListDisplay","publish"],"sourceRoot":""}