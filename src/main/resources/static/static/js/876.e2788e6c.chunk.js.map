{"version":3,"file":"static/js/876.e2788e6c.chunk.js","mappings":"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","sources":["ApiCaller.js","components/PageHeader.js","pages/Overview.js"],"sourcesContent":["import {BASE_URL} from \"./constants\";\r\n\r\nexport class ApiCaller {\r\n\r\n\r\n    baseUrl = BASE_URL\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    async sendPost(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            console.log(await response.json())\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n        return  await response.json()\r\n    }\r\n    async sendPostNoLogin(path, data) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n\r\n        return await response.json()\r\n    }\r\n\r\n    async sendGet(path, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    async sendDelete(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json()\r\n    }\r\n\r\n\r\n}\r\n","import {Typography} from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst PageHeader = ({title}) => {\r\n\r\n    return (\r\n        <>\r\n\r\n            <Box sx={{ paddingTop: 2 }}>\r\n                <Typography fontSize={\"xx-large\"} sx={{ fontFamily: 'Garamond', color:'primary.main'}}>\r\n                    <strong>{title}</strong>\r\n                </Typography>\r\n                <br />\r\n            </Box>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n\r\n\r\n\r\n","import React, {useState, useEffect, useContext} from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport ListAltIcon from '@mui/icons-material/ListAltTwoTone';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport {Typography, CircularProgress, ToggleButtonGroup, ToggleButton, Icon} from '@mui/material';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport LibraryAddCheckIcon from '@mui/icons-material/LibraryAddCheckTwoTone';\r\nimport PageHeader from \"../components/PageHeader\";\r\nconst apiCaller = new ApiCaller();\r\n\r\nexport default function InteractiveList() {\r\n    const {loginDetails, user} = useContext(AuthContext);\r\n    const [overviewData, setOverviewData] = useState([]);\r\n    const [activeFiltered, setFilteredList] = useState([])\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [alignment, setAlignment] = React.useState('all');\r\n\r\n    const handleChange = (event, newAlignment) => {\r\n        setAlignment(newAlignment);\r\n        filterList(newAlignment);\r\n    };\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                const data = await apiCaller.sendGet(\"list/all\", loginDetails);\r\n                setOverviewData(data);\r\n                setFilteredList(data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching data\", error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, [loginDetails]);\r\n\r\n    function goToList(id) {\r\n        navigate(`/web/list/${id}`);\r\n    }\r\n\r\n    function filterList(option) {\r\n        switch (option) {\r\n            case \"all\":\r\n                setFilteredList(overviewData);\r\n                break;\r\n\r\n            case \"private\":\r\n                setFilteredList(overviewData.filter(privateList));\r\n                break;\r\n\r\n            case \"shared\":\r\n                setFilteredList(overviewData.filter(sharedList));\r\n                break;\r\n        }\r\n    }\r\n\r\n    function privateList(l) {\r\n        return l.users === 1;\r\n    }\r\n\r\n    function sharedList(l) {\r\n        return l.users !== 1;\r\n    }\r\n    function getListIcon(type) {\r\n        switch (type) {\r\n            case 'CHECK':\r\n                return <LibraryAddCheckIcon sx={{color: \"primary.darker\"}}/>;\r\n            default:\r\n                return <ListAltIcon sx={{color: \"primary.darker\"}}/>;\r\n        }\r\n    }\r\n\r\n\r\n    function ownsList(l){\r\n        return l.owner === user.username;\r\n    }\r\n    return (\r\n        <>\r\n            <Box maxWidth={750} sx={{ mx: 'auto' }}>\r\n                <PageHeader title={\"Lists\"}></PageHeader>\r\n                <Box sx={{ paddingBottom: 2 }}>\r\n                    <ToggleButtonGroup\r\n                        color=\"primary\"\r\n                        value={alignment}\r\n                        exclusive\r\n                        onChange={handleChange}\r\n                        aria-label=\"Filter\"\r\n                    >\r\n                        <ToggleButton value=\"private\">Private</ToggleButton>\r\n                        <ToggleButton value=\"all\">All</ToggleButton>\r\n                        <ToggleButton value=\"shared\">Shared</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </Box>\r\n\r\n                {loading && (\r\n                    <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n                        <CircularProgress />\r\n                    </Box>\r\n                )}\r\n\r\n                {!loading && activeFiltered.length === 0 && (\r\n                    <Typography variant=\"h7\" color=\"textSecondary\" align=\"center\">\r\n                        Empty\r\n                    </Typography>\r\n                )}\r\n\r\n                {!loading && activeFiltered.length > 0 && (\r\n                    <List dense>\r\n                        {activeFiltered.map((list) => (\r\n                            <ListItem\r\n                                key={list.id}\r\n                                onClick={() => goToList(list.id)}\r\n                                sx={{\r\n                                    cursor: 'pointer',\r\n                                    border: '1px solid ',\r\n                                    borderColor: 'primary.darker',\r\n                                    marginTop: '5px',\r\n                                    borderRadius: '5px',\r\n                                }}\r\n                            >\r\n                                <ListItemAvatar>\r\n                                    <Avatar sx={{backgroundColor: \"primary.lighter\"}}>\r\n                                        {getListIcon(list.type)}\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary={list.name}\r\n                                    secondary={list.desc}\r\n                                />\r\n                                {!ownsList(list)? (\r\n                                    <Box sx={{  color: 'primary.lighter', display: 'flex', flexDirection: 'column', alignItems: 'center',}}>\r\n                                    <PersonIcon />\r\n                                    <Typography >{list.owner}</Typography>\r\n                                </Box>\r\n                                ): (\r\n                                    <Box><Icon></Icon></Box>\r\n                                )}\r\n\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                )}\r\n            </Box>\r\n        </>\r\n\r\n\r\n);\r\n}\r\n"],"names":["ApiCaller","constructor","baseUrl","BASE_URL","sendPost","path","data","loginDetails","response","fetch","this","method","headers","body","JSON","stringify","ok","console","log","json","errorResponse","Error","sendPostNoLogin","sendGet","sendDelete","_ref","title","_jsx","_Fragment","children","_jsxs","Box","sx","paddingTop","Typography","fontSize","fontFamily","color","apiCaller","InteractiveList","user","useContext","AuthContext","overviewData","setOverviewData","useState","activeFiltered","setFilteredList","loading","setLoading","navigate","useNavigate","alignment","setAlignment","React","privateList","l","users","sharedList","useEffect","async","error","fetchData","maxWidth","mx","PageHeader","paddingBottom","ToggleButtonGroup","value","exclusive","onChange","handleChange","event","newAlignment","option","filter","filterList","ToggleButton","display","justifyContent","mt","CircularProgress","length","variant","align","List","dense","map","list","ListItem","onClick","goToList","id","concat","cursor","border","borderColor","marginTop","borderRadius","ListItemAvatar","Avatar","backgroundColor","type","LibraryAddCheckIcon","ListAltIcon","ListItemText","primary","name","secondary","desc","owner","username","flexDirection","alignItems","PersonIcon","Icon"],"sourceRoot":""}