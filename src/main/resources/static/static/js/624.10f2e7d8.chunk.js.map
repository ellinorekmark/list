{"version":3,"file":"static/js/624.10f2e7d8.chunk.js","mappings":"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","sources":["ApiCaller.js","pages/Admin.js"],"sourcesContent":["import {BASE_URL} from \"./constants\";\r\n\r\nexport class ApiCaller {\r\n\r\n\r\n    baseUrl = BASE_URL\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    async sendPost(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            console.log(await response.json())\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n        return  await response.json()\r\n    }\r\n    async sendPostNoLogin(path, data) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n\r\n        return await response.json()\r\n    }\r\n\r\n    async sendGet(path, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n    async sendGetNoAuth(path) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    async sendDelete(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json()\r\n    }\r\n\r\n\r\n}\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {Accordion, AccordionDetails, AccordionSummary, CircularProgress, TextField, Typography} from \"@mui/material\";\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nconst apiCaller = new ApiCaller();\r\n\r\nconst Admin = () => {\r\n    const {user, loginDetails} = useContext(AuthContext);\r\n    const [loading, setLoading] = useState(true);\r\n    const [postLoading, setPostLoading] = useState(false);\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(false);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [userInfo, setUsers] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            try {\r\n                const result = await apiCaller.sendGet(\"admin\", loginDetails)\r\n                setData(result)\r\n                const users = await apiCaller.sendGet(\"admin/users\", loginDetails)\r\n                setUsers(users)\r\n            } catch (e) {\r\n                setError(true)\r\n            } finally {\r\n                setLoading(false)\r\n            }\r\n        }\r\n        getData()\r\n    }, [])\r\n\r\n    const handleReset = async () => {\r\n        setPostLoading(true)\r\n        try {\r\n            await apiCaller.sendPost(\"admin/resetPassword\", {\"username\": username, \"password\": password}, loginDetails)\r\n        } catch (e) {\r\n            console.log(\"failed. \", e)\r\n        } finally {\r\n            setPostLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Typography fontSize={\"xx-large\"} sx={{fontFamily: 'Garamond'}}>Admin page</Typography>\r\n            <Box maxWidth={300} sx={{mx: 'auto'}}>\r\n\r\n                {loading ? (\r\n                    <CircularProgress/>\r\n                ) : (<>\r\n                        <Box sx={{\r\n                            width: 300,\r\n                            mx: 'auto',\r\n                            mt: 4,\r\n                            paddingTop: 1,\r\n                            paddingBottom: 1,\r\n                            border: '1px solid',\r\n                            borderColor: 'primary.darker',\r\n                            borderRadius: 2,\r\n                            boxShadow: 2,\r\n                        }}>\r\n                            <Typography>Users : {data.users}</Typography>\r\n                            <Typography>Lists : {data.lists}</Typography>\r\n                            <Typography>Items : {data.items}</Typography>\r\n                            <Typography>Shared lists : {data.sharedLists}</Typography>\r\n                        </Box>\r\n                        <Box sx={{\r\n                            width: 300,\r\n                            mx: 'auto',\r\n                            mt: 4,\r\n                            paddingTop: 1,\r\n                            paddingBottom: 1,\r\n                            border: '1px solid',\r\n                            borderColor: 'primary.darker',\r\n                            borderRadius: 2,\r\n                            boxShadow: 2,\r\n                        }}>\r\n                            {userInfo.map((user) => (\r\n                                <Typography>{user.username} - {user.email}</Typography>\r\n                            ))}\r\n                        </Box>\r\n\r\n                        <Box maxWidth={300} sx={{mx: 'auto'}}>\r\n                            <br/>\r\n                            <Accordion sx={{\r\n                                mx: 'auto',\r\n                                mt: 2,\r\n                                border: '1px solid',\r\n                                borderColor: 'primary.darker',\r\n                                borderRadius: 2,\r\n                            }}>\r\n                                <AccordionSummary>\r\n                                    <Box sx={{width: '100%', display: 'flex', justifyContent: 'center'}}>\r\n                                        <Typography>Reset User Password</Typography>\r\n                                    </Box>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        id=\"username\"\r\n                                        label=\"Username\"\r\n                                        variant=\"outlined\"\r\n                                        value={username}\r\n                                        onChange={(e) => setUsername(e.target.value)}\r\n                                    />\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        id=\"password\"\r\n                                        label=\"Password\"\r\n                                        type=\"password\"\r\n                                        variant=\"outlined\"\r\n                                        margin=\"normal\"\r\n                                        value={password}\r\n                                        onChange={(e) => setPassword(e.target.value)}\r\n                                    />\r\n                                    {postLoading ? (\r\n                                        <Box sx={{display: 'flex', justifyContent: 'center', mt: 4}}>\r\n                                            <CircularProgress/>\r\n                                        </Box>\r\n                                    ) : (\r\n                                        <Button\r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            sx={{mt: 1, p: 1}}\r\n                                            onClick={handleReset}>\r\n                                            Change password\r\n                                        </Button>\r\n                                    )}\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        </Box>\r\n                    </>\r\n                )}\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Admin;\r\n"],"names":["ApiCaller","constructor","baseUrl","BASE_URL","sendPost","path","data","loginDetails","response","fetch","this","method","headers","body","JSON","stringify","ok","console","log","json","errorResponse","Error","sendPostNoLogin","sendGet","sendGetNoAuth","sendDelete","apiCaller","Admin","user","useContext","AuthContext","loading","setLoading","useState","postLoading","setPostLoading","setData","error","setError","username","setUsername","password","setPassword","userInfo","setUsers","useEffect","async","result","users","e","getData","_jsxs","_Fragment","children","_jsx","Typography","fontSize","sx","fontFamily","Box","maxWidth","mx","CircularProgress","width","mt","paddingTop","paddingBottom","border","borderColor","borderRadius","boxShadow","lists","items","sharedLists","map","email","Accordion","AccordionSummary","display","justifyContent","AccordionDetails","TextField","fullWidth","id","label","variant","value","onChange","target","type","margin","Button","p","onClick"],"sourceRoot":""}