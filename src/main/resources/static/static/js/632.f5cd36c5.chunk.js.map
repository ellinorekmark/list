{"version":3,"file":"static/js/632.f5cd36c5.chunk.js","mappings":"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","sources":["ApiCaller.js","components/BasicList.js","components/CheckListDisplay.js","components/LinkedList.js","components/ListDesc.js","components/MultiList.js","components/PageHeader.js","components/EditItems.js","components/AddItem.js","components/EditListDetails.js","components/PublicListSettings.js","components/HandleUsers.js","components/ViewOnlyUsers.js","components/BulkAdd.js","components/ListDialog.js","components/ListOptions.js","components/ListDisplay.js","pages/ViewList.js"],"sourcesContent":["import {BASE_URL} from \"./constants\";\r\n\r\nexport class ApiCaller {\r\n\r\n\r\n    baseUrl = BASE_URL\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    async sendPost(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            console.log(await response.json())\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n        return  await response.json()\r\n    }\r\n    async sendPostNoLogin(path, data) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            const errorResponse = await response.json()\r\n            throw new Error(errorResponse)\r\n        }\r\n\r\n        return await response.json()\r\n    }\r\n\r\n    async sendGet(path, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n    async sendGetNoAuth(path) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json();\r\n    }\r\n\r\n    async sendDelete(path, data, loginDetails) {\r\n        const response = await fetch(this.baseUrl + path, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + loginDetails\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        if (!response.ok) {\r\n            throw new Error(await response.json())\r\n        }\r\n        return await response.json()\r\n    }\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    IconButton,\r\n    Icon\r\n} from '@mui/material';\r\n\r\nconst BasicList = ({uList}) => {\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {uList.items.map((item) => (\r\n                    <ListItem\r\n                        key={item.id}\r\n                        sx={{\r\n                            cursor: 'pointer',\r\n                            border: '1px solid ',\r\n                            borderColor: 'primary.darker',\r\n                            marginTop: '5px',\r\n                            borderRadius: '5px',\r\n                        }}\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <Box>\r\n                            </Box>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={item.item}\r\n                            primaryTypographyProps={{fontSize: '18px'}}\r\n                        />\r\n                        <IconButton sx={{\r\n                            pointerEvents: 'none',\r\n                        }} edge=\"end\">\r\n                            <Icon ></Icon>\r\n                        </IconButton>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicList;\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    IconButton,\r\n    Icon\r\n} from '@mui/material';\r\n\r\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\nimport {AuthContext} from \"../AuthContext\";\r\n\r\nconst CheckListDisplay = ({ uList, updateList, isPublic }) => {\r\n    const {user} = useContext(AuthContext);\r\n    const [editRights, setEditRights] = useState(() => {\r\n        if(isPublic){\r\n            return false\r\n        }\r\n        else {\r\n            return user.username === uList.owner || uList.editors.includes(user.username);\r\n        }\r\n    });\r\n\r\n    function getCheckStatus(status) {\r\n        switch (status) {\r\n            case '1':\r\n                return <CheckBoxIcon sx={{color:'secondary.main'}}/>;\r\n            default:\r\n                return <CheckBoxOutlineBlankIcon sx={{color:'secondary.main'}} />;\r\n        }\r\n    }\r\n\r\n    const handleItemClick = (itemId) => {\r\n        if(editRights){\r\n            const updatedItems = uList.items.map((item) =>\r\n                item.id === itemId\r\n                    ? { ...item, itemStatus: item.itemStatus === '1' ? '' : '1' }\r\n                    : item\r\n            );\r\n            updateList({ ...uList, items: updatedItems });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {uList.items.map((item) => (\r\n                    <ListItem\r\n                        key={item.id}\r\n                        sx={{\r\n                            cursor: 'pointer',\r\n                            border: '1px solid ',\r\n                            borderColor: 'primary.darker',\r\n                            marginTop: '5px',\r\n                            borderRadius: '5px',\r\n                        }}\r\n                        onClick={() => handleItemClick(item.id)}\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <Box>\r\n                                {getCheckStatus(item.itemStatus)}\r\n                            </Box>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={item.item}\r\n                            primaryTypographyProps={{ fontSize: '18px' }}\r\n                        />\r\n                        <IconButton sx={{\r\n                            pointerEvents: 'none',\r\n                        }} edge=\"end\" >\r\n                            <Icon></Icon>\r\n                        </IconButton>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CheckListDisplay;\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    IconButton,\r\n    Icon, DialogTitle, DialogContent, DialogActions, Button, Dialog, TextField,\r\n} from '@mui/material';\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\nimport {AuthContext} from \"../AuthContext\";\r\n\r\nconst LinkedList = ({uList, updateList, isPublic}) => {\r\n    const {user} = useContext(AuthContext);\r\n    const [editRights, setEditRights] = useState(() => {\r\n        if(isPublic){\r\n            return false\r\n        }\r\n        else {\r\n            return user.username === uList.owner || uList.editors.includes(user.username);\r\n        }\r\n\r\n    });\r\n\r\n\r\n    const [dialog, setDialog] = useState(false)\r\n    const [selected, setSelected] = useState(\"\")\r\n    const [selectedURL, setSelectedURL] = useState(\"\")\r\n    const [copied, setCopied] = useState(false)\r\n\r\n    function openInNewTab(url) {\r\n        if (url !== \"\") {\r\n            window.open(url, '_blank', 'noopener,noreferrer');\r\n        }\r\n\r\n    }\r\n\r\n    function openSettings(item) {\r\n        setSelected(item);\r\n        setSelectedURL(item.itemStatus)\r\n        setDialog(true)\r\n    }\r\n\r\n    function saveAndClose() {\r\n        const updatedItems = uList.items.map((item) =>\r\n            item.id === selected.id\r\n                ? {...item, itemStatus: selectedURL}\r\n                : item\r\n        );\r\n        updateList({...uList, items: updatedItems});\r\n        setDialog(false);\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false)\r\n    }\r\n\r\n    const copyToClipboard = async () => {\r\n        try {\r\n            await navigator.clipboard.writeText(selectedURL);\r\n            setCopied(true);\r\n            setTimeout(() => setCopied(false), 2000);\r\n        } catch (err) {\r\n            console.error(\"Failed to copy text: \", err);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                {uList.items.map((item) => (\r\n\r\n                    <ListItem\r\n                        key={item.id}\r\n                        sx={{\r\n                            cursor: 'pointer',\r\n                            border: '1px solid ',\r\n                            borderColor: 'primary.darker',\r\n                            marginTop: '5px',\r\n                            borderRadius: '5px',\r\n                        }}\r\n                    >\r\n                        <ListItemAvatar onClick={() => openInNewTab(item.itemStatus)}>\r\n                            {item.itemStatus !== \"\" && <OpenInNewIcon></OpenInNewIcon>}\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={item.item}\r\n                            primaryTypographyProps={{fontSize: '18px'}}\r\n                            onClick={() => openInNewTab(item.itemStatus)}\r\n                        />\r\n                        <IconButton edge=\"end\" onClick={() => openSettings(item)}>\r\n                            <SettingsIcon></SettingsIcon>\r\n                        </IconButton>\r\n                    </ListItem>\r\n\r\n\r\n                ))}\r\n            </List>\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n            >\r\n                <DialogTitle textAlign={'center'}>\r\n                    Edit link\r\n                </DialogTitle>\r\n                <br/>\r\n                {selectedURL !== \"\" &&\r\n                <Button variant=\"outlined\" fullWidth onClick={copyToClipboard}>\r\n                    {copied ? \"Link Copied!\" : \"Copy Link\"}\r\n                </Button>\r\n            }\r\n                <DialogContent>\r\n\r\n\r\n                    {editRights ? (<TextField label=\"Edit Link\"\r\n                                              value={selectedURL}\r\n                                              onChange={(e) => setSelectedURL(e.target.value)}\r\n                    ></TextField>) : (\r\n                        <TextField label=\"Link\"\r\n                                   value={selectedURL}\r\n                        ></TextField>\r\n                    )}\r\n\r\n\r\n                </DialogContent>\r\n                <DialogActions sx={{justifyContent: 'center'}}>\r\n\r\n\r\n                    <Button onClick={() => {\r\n                        setDialog(false)\r\n                    }} variant=\"contained\">\r\n                        Close\r\n                    </Button>\r\n                    {editRights && (<Button onClick={() => {\r\n                        saveAndClose()\r\n                    }} variant=\"contained\">\r\n                        Save\r\n                    </Button>)}\r\n\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LinkedList;\r\n","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst ListDesc = ({uList}) => {\r\n\r\n    const description = () => {\r\n        if (uList.listInfo.listDesc !== null) {\r\n            return <>\r\n                <Box sx={{marginBottom: 1, gridRow: '1', gridColumn: \"1 / 2\", m: 1, paddingLeft: 2, paddingRight: 2}}>\r\n                    <Typography fontSize={\"large\"}>\r\n                        {uList.listInfo.listDesc}\r\n                        <br/>\r\n                    </Typography>\r\n                </Box>\r\n            </>\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {description()}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListDesc;\r\n\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    IconButton,\r\n    DialogTitle, DialogContent, DialogActions, Button, Dialog, TextField,\r\n} from '@mui/material';\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\r\nimport KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport CheckBoxOutlineBlankIcon from \"@mui/icons-material/CheckBoxOutlineBlank\";\r\nimport EditNoteIcon from '@mui/icons-material/EditNote';\r\n\r\n\r\nconst MultiList = ({uList, updateList, isPublic}) => {\r\n        const {user} = useContext(AuthContext);\r\n        const [editRights, setEditRights] = useState(() => {\r\n            if (isPublic) {\r\n                return false\r\n            } else {\r\n                return user.username === uList.owner || uList.editors.includes(user.username);\r\n            }\r\n\r\n        });\r\n\r\n        const [openItems, setOpenItems] = useState({});\r\n\r\n        const toggleOpen = (itemId) => {\r\n            setOpenItems((prev) => ({\r\n                ...prev,\r\n                [itemId]: !prev[itemId],\r\n            }));\r\n        };\r\n\r\n\r\n        const [noteDialog, setNoteDialog] = useState(false)\r\n        const [selected, setSelected] = useState(\"\")\r\n        const [comment, setComment] = useState(\"\")\r\n\r\n        function openNoteEdit(item) {\r\n            setSelected(item);\r\n            setComment(item.comment || \"\");\r\n            setNoteDialog(true);\r\n        }\r\n\r\n        function saveAndClose() {\r\n            if(comment===\"\"){\r\n                toggleOpen(selected.id)\r\n            }\r\n\r\n            const updatedItems = uList.items.map((item) =>\r\n                item.id === selected.id\r\n                    ? {...item, comment: comment}\r\n                    : item\r\n            );\r\n            updateList({...uList, items: updatedItems});\r\n            setNoteDialog(false);\r\n        }\r\n\r\n        const closeDialog = () => {\r\n            setNoteDialog(false)\r\n        }\r\n\r\n        function listHasLinks() {\r\n            return uList.listInfo.hasLink;\r\n        }\r\n\r\n        function itemHasLink(url) {\r\n            if(uList.listInfo.hasLink){\r\n                if (url !== null) {\r\n                    return url !== \"\";\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        function listHasComments() {\r\n            return uList.listInfo.hasComment;\r\n        }\r\n\r\n        function itemHasComment(item) {\r\n\r\n            if (item.comment !== null) {\r\n                if (item.comment !== '') {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function listHasChecks() {\r\n            return uList.listInfo.hasCheck;\r\n        }\r\n\r\n\r\n        function openInNewTab(url) {\r\n            if (itemHasLink(url)) {\r\n                window.open(url, '_blank', 'noopener,noreferrer');\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function editCommentButton(item) {\r\n            if (editRights) {\r\n                return <IconButton onClick={() => openNoteEdit(item)}>\r\n                    <EditNoteIcon/>\r\n                </IconButton>\r\n            } else {\r\n                return <></>\r\n            }\r\n        }\r\n\r\n\r\n        function getCheckStatus(item) {\r\n            if (uList.listInfo.hasCheck === true) {\r\n                return item.checked;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function getCheckBox(item) {\r\n            if (item.checked) {\r\n                return <CheckBoxIcon sx={{color: 'primary.main'}}/>;\r\n            } else {\r\n                return <CheckBoxOutlineBlankIcon sx={{color: 'primary.main'}}/>;\r\n            }\r\n        }\r\n\r\n        const toggleCheck = (itemId) => {\r\n            if (editRights) {\r\n                const updatedItems = uList.items.map((item) =>\r\n                    item.id === itemId\r\n                        ? {...item, checked: !item.checked} // Properly toggle `checked`\r\n                        : item\r\n                );\r\n                updateList({...uList, items: updatedItems});\r\n            }\r\n        };\r\n\r\n\r\n        return (\r\n            <>\r\n                <List>\r\n                    {uList.items.map((item) => (\r\n                        <div key={item.id}>\r\n                            <ListItem\r\n                                sx={{\r\n                                    cursor: 'pointer',\r\n                                    border: '1px solid ',\r\n                                    borderColor: 'primary.darker',\r\n                                    marginTop: '5px',\r\n                                    borderRadius: '5px',\r\n                                    opacity: getCheckStatus(item) && 0.5,\r\n                                    textDecoration: (() => {\r\n                                        const hasStrikeThrough = getCheckStatus(item);\r\n                                        const hasUnderline = itemHasLink(item.link);\r\n                                        if (hasStrikeThrough && hasUnderline) return 'line-through underline';\r\n                                        if (hasStrikeThrough) return 'line-through';\r\n                                        if (hasUnderline) return 'underline';\r\n                                        return 'none';\r\n                                    })(),\r\n                                }}\r\n                            >\r\n                                <ListItemAvatar>\r\n                                    {listHasComments() ?\r\n                                        <>\r\n                                            {itemHasComment(item) ?\r\n                                                <>\r\n                                                    <IconButton onClick={() => toggleOpen(item.id)}>\r\n                                                        {openItems[item.id] ? (\r\n                                                            <KeyboardArrowDownIcon/>\r\n                                                        ) : (\r\n                                                            <KeyboardArrowRightIcon/>\r\n                                                        )}\r\n                                                    </IconButton>\r\n                                                </> : <>{editCommentButton(item)}</>\r\n                                            }\r\n                                        </>\r\n\r\n                                        :\r\n                                        <>\r\n                                            {listHasLinks() &&\r\n                                                <>\r\n                                                    {itemHasLink(item.link) && <OpenInNewIcon></OpenInNewIcon>}\r\n                                                </>\r\n                                            }\r\n                                        </>\r\n\r\n                                    }\r\n\r\n                                </ListItemAvatar>\r\n                                {listHasLinks &&\r\n                                    <>{listHasComments() &&\r\n                                        <>\r\n                                            {itemHasLink(item.link) &&\r\n                                                <OpenInNewIcon sx={{paddingRight: '5px'}}></OpenInNewIcon>}\r\n                                        </>\r\n                                    }</>\r\n                                }\r\n\r\n\r\n                                <ListItemText\r\n                                    primary={item.item}\r\n                                    primaryTypographyProps={{fontSize: '18px'}}\r\n                                    onClick={() => openInNewTab(item.link)}\r\n                                />\r\n                                {listHasChecks() && <IconButton edge=\"end\" onClick={() => toggleCheck(item.id)}>\r\n                                    {getCheckBox(item)}\r\n                                </IconButton>}\r\n\r\n\r\n                            </ListItem>\r\n                            {openItems[item.id] && (\r\n                                <ListItem\r\n                                    sx={{\r\n                                        marginTop: '5px',\r\n                                        padding: '10px',\r\n                                        borderRadius: '5px',\r\n\r\n                                    }}\r\n                                ><ListItemAvatar>\r\n                                    {editCommentButton(item)}\r\n                                </ListItemAvatar>\r\n\r\n                                    <ListItemText\r\n                                        secondary={item.comment}\r\n                                        secondaryTypographyProps={{\r\n                                            fontSize: '14px',\r\n                                            color: 'text.secondary',\r\n                                            align: 'left',\r\n                                            marginLeft: '10px'\r\n                                        }}\r\n                                    />\r\n                                </ListItem>\r\n                            )}\r\n                        </div>\r\n\r\n                    ))}\r\n                </List>\r\n                <Dialog sx={{\r\n                    '& .MuiDialog-paper': {\r\n                        width: '600px', // Set the desired width\r\n                        maxWidth: '80%', // Optional: responsive maximum width\r\n                    },\r\n                }}\r\n                        open={noteDialog}\r\n                        onClose={closeDialog}\r\n                >\r\n                    <DialogTitle textAlign={'center'}>\r\n                        Edit Notes\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField\r\n                                   inputProps={{maxLength: 1000}}\r\n                                   id=\"outlined-multiline-flexible\"\r\n                                   label=\"Notes\"\r\n                                   multiline\r\n                                   rows={4}\r\n                                   autoComplete='off'\r\n                                   variant=\"outlined\"\r\n                                   value={comment}\r\n                                   onChange={(e) => setComment(e.target.value)}\r\n                                   fullWidth\r\n                        ></TextField>\r\n\r\n\r\n                    </DialogContent>\r\n                    <DialogActions sx={{justifyContent: 'center'}}>\r\n\r\n\r\n                        <Button onClick={() => {\r\n                            setNoteDialog(false)\r\n                        }} variant=\"contained\">\r\n                            Close\r\n                        </Button>\r\n                        {editRights && (<Button onClick={() => {\r\n                            saveAndClose()\r\n                        }} variant=\"contained\">\r\n                            Save\r\n                        </Button>)}\r\n\r\n\r\n                    </DialogActions>\r\n\r\n                </Dialog>\r\n            </>\r\n        );\r\n    }\r\n;\r\n\r\nexport default MultiList;\r\n","import {Typography} from \"@mui/material\";\r\nimport Box from \"@mui/material/Box\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst PageHeader = ({title}) => {\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ paddingTop: 2, paddingRight:5, paddingLeft:5}}>\r\n                <Typography fontSize={\"xx-large\"} sx={{ fontFamily: 'Garamond', color:'primary.main'}}>\r\n                    <strong>{title}</strong>\r\n                </Typography>\r\n                <br />\r\n            </Box>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n\r\n\r\n\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport {DragDropContext, Draggable, Droppable} from \"@hello-pangea/dnd\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport {DragIndicator} from '@mui/icons-material';\r\nimport ListItemAvatar from \"@mui/material/ListItemAvatar\";\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport {Button, CircularProgress, Dialog, DialogActions, DialogContent, DialogTitle, TextField} from \"@mui/material\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport BorderColorIcon from '@mui/icons-material/BorderColor';\r\n\r\nconst api = new ApiCaller()\r\n\r\nconst EditItems = ({uList, updateList}) => {\r\n    const {loginDetails} = useContext(AuthContext);\r\n    const [loading, setLoading] = useState(\"\");\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setLoading('');\r\n    }, [uList]);\r\n    const handleDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        const startIndex = result.source.index;\r\n        const endIndex = result.destination.index;\r\n        const copyList = [...uList.items];\r\n        const [reorderItem] = copyList.splice(startIndex, 1);\r\n        copyList.splice(endIndex, 0, reorderItem);\r\n        copyList.forEach((item, index) => {\r\n            item.itemOrder = index + 1;\r\n        });\r\n        uList.items = copyList;\r\n        updateList(uList);\r\n    };\r\n\r\n\r\n    const removeItem = async (item) => {\r\n        setLoading(item)\r\n        const updated = await api.sendDelete(\"list/item\", item, loginDetails)\r\n\r\n        updateList(updated);\r\n    };\r\n    const {user} = useContext(AuthContext);\r\n\r\n    const [editRights, setEditRights] = useState(() => {\r\n            return user.username === uList.owner || uList.editors.includes(user.username);\r\n\r\n\r\n    });\r\n\r\n    const [dialog, setDialog] = useState(false)\r\n    const [editItemDialog, setEditItemDialog] = useState(false)\r\n    const [selected, setSelected] = useState(\"\")\r\n    const [selectedItem, setSelectedItem] = useState(\"\")\r\n    const [selectedURL, setSelectedURL] = useState(\"\")\r\n    const [copied, setCopied] = useState(false)\r\n\r\n    function openSettings(item) {\r\n        setSelected(item);\r\n        setSelectedURL(item.link)\r\n        setSelectedItem(item.item)\r\n        setDialog(true)\r\n    }\r\n\r\n    function openEditItem(item){\r\n        setSelected(item);\r\n        setSelectedItem(item.item);\r\n        setEditItemDialog(true);\r\n    }\r\n    function listHasLinks(){\r\n        if(uList.listInfo.type===\"LINK\"){\r\n            return true;\r\n        }\r\n        return uList.listInfo.hasLink;\r\n    }\r\n\r\n    function saveAndClose() {\r\n\r\n        const updatedItems = uList.items.map((item) =>\r\n            item.id === selected.id\r\n                ? {...item, link: selectedURL, item:selectedItem}\r\n                : item\r\n        );\r\n\r\n        updateList({...uList, items: updatedItems});\r\n        setDialog(false);\r\n    }\r\n\r\n    function saveItemAndClose(){\r\n        const updatedItems = uList.items.map((item) =>\r\n            item.id === selected.id\r\n                ? {...item, item: selectedItem}\r\n                : item\r\n        );\r\n        updateList({...uList, items: updatedItems});\r\n        setEditItemDialog(false);\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialog(false)\r\n    }\r\n\r\n    const copyToClipboard = async () => {\r\n        try {\r\n            await navigator.clipboard.writeText(selectedURL);\r\n            setCopied(true);\r\n            setTimeout(() => setCopied(false), 2000);\r\n        } catch (err) {\r\n            console.error(\"Failed to copy text: \", err);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                <DragDropContext onDragEnd={handleDragEnd}>\r\n                    <Droppable droppableId=\"items\">\r\n                        {(droppableProvider) => (\r\n                            <Box\r\n                                ref={droppableProvider.innerRef}\r\n                                {...droppableProvider.droppableProps}\r\n                            >\r\n                                {uList.items.map((item, index) => (\r\n                                    <Draggable\r\n                                        index={index}\r\n                                        key={item.id}\r\n                                        draggableId={item.id + \"\"}\r\n                                    >\r\n                                        {(draggableProvider) => (\r\n                                            <Box key={item.id} sx={{\r\n                                                display:'flex'\r\n                                            }}>\r\n                                                <ListItem\r\n                                                ref={draggableProvider.innerRef}\r\n                                                {...draggableProvider.draggableProps}\r\n                                                {...draggableProvider.dragHandleProps}\r\n                                                sx={{\r\n                                                    cursor: 'pointer',\r\n                                                    border: '1px solid ',\r\n                                                    borderColor: 'primary.darker',\r\n                                                    marginTop: '5px',\r\n                                                    borderRadius: '5px',\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    justifyContent: 'space-between',\r\n\r\n                                                }}\r\n\r\n                                            >\r\n                                                <ListItemAvatar>\r\n                                                    <Box>\r\n                                                        <DragIndicator/>\r\n                                                    </Box>\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText primary={item.item}\r\n                                                              primaryTypographyProps={{fontSize: '18px'}}/>\r\n                                                    <IconButton edge=\"end\" aria-label=\"edit\"\r\n                                                                                  onClick={() => openSettings(item)}>\r\n                                                        <BorderColorIcon></BorderColorIcon>\r\n                                                    </IconButton>\r\n\r\n                                            </ListItem>\r\n\r\n                                            <Box\r\n                                            onClick={() => removeItem(item)}\r\n                                        sx={{\r\n                                            cursor: 'pointer',\r\n                                            marginTop: '5px',\r\n                                            borderRadius: '5px',\r\n                                            width: '60px',\r\n                                            height: '58px',\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: 'center',\r\n                                        }}\r\n                                    >\r\n                                                {loading === item ? (<CircularProgress></CircularProgress>) : (\r\n                                                <IconButton edge=\"end\" aria-label=\"delete\">\r\n                                                    <ClearIcon/>\r\n                                                </IconButton>\r\n                                                    )}\r\n\r\n\r\n                                    </Box>\r\n                                    </Box>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {droppableProvider.placeholder}\r\n                            </Box>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            </List>\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n            >\r\n                <DialogTitle textAlign={'center'}>\r\n                    Edit Item\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <TextField label=\"Item\"\r\n                               value={selectedItem}\r\n                               onChange={(e) => setSelectedItem(e.target.value)}\r\n                               sx={{marginY: '10px'}}\r\n                               fullWidth\r\n                    ></TextField>\r\n                    <br/>\r\n                    {listHasLinks() &&\r\n\r\n                        <><TextField label=\"Edit Link\"\r\n                                     value={selectedURL}\r\n                                     onChange={(e) => setSelectedURL(e.target.value)}\r\n                                     sx={{marginY: '10px'}}\r\n                                     fullWidth\r\n                        ></TextField>{selectedURL !== \"\" &&\r\n                            <Button variant=\"outlined\" fullWidth onClick={copyToClipboard}>\r\n                                {copied ? \"Link Copied!\" : \"Copy Link\"}\r\n                            </Button>\r\n                                                               }\r\n                        <br/>\r\n                        </>\r\n\r\n                    }\r\n                </DialogContent>\r\n\r\n                <DialogActions sx={{justifyContent: 'center'}}>\r\n\r\n\r\n                    <Button onClick={() => {\r\n                        setDialog(false)\r\n                    }} variant=\"contained\">\r\n                        Close\r\n                    </Button>\r\n                    <Button onClick={() => {\r\n                        saveAndClose()\r\n                    }} variant=\"contained\">\r\n                        Save\r\n                    </Button>\r\n\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditItems;\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button, CircularProgress,\r\n    TextField,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\n\r\nconst AddItem = ({uList, updateList}) => {\r\n    const [newItem, setItem] = useState('');\r\n    const [link, setLink] = useState('');\r\n    const [comment, setComment] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const textRef = useRef();\r\n\r\n    useEffect(() => {\r\n        setLoading(false);\r\n    }, [uList]);\r\n\r\n    const handleSubmit = (event) => {\r\n\r\n        event.preventDefault();\r\n        setLoading(true);\r\n        addOne();\r\n\r\n\r\n    };\r\n\r\n    function addToList(i, updatedList) {\r\n        const newItemObj = {\r\n            listId: uList.listInfo.id,\r\n            item: i,\r\n            itemOrder: updatedList.items.length + 1,\r\n            link: link,\r\n            comment: comment\r\n        };\r\n\r\n        return {\r\n            ...updatedList,\r\n            items: [...updatedList.items, newItemObj]\r\n        };\r\n    }\r\n    function hasLink(){\r\n        if(uList.listInfo.type === \"LINK\"){\r\n            return true;\r\n        }\r\n        if(uList.listInfo.hasLink === true){\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function hasComment(){\r\n        return uList.listInfo.hasComment;\r\n    }\r\n\r\n    const addOne = () => {\r\n        if (newItem.trim() === '') {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        let updatedList = addToList(newItem, uList);\r\n        updateList(updatedList);\r\n\r\n        setItem('');\r\n        setLink('');\r\n        setComment('');\r\n        textRef.current.focus();\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <Box sx={{display: 'flex', alignItems: 'center', mt: 2}}>\r\n                    <Box sx={{flex: 1, display: 'flex', flexDirection: 'column'}}>\r\n                        <TextField\r\n                            inputProps={{maxLength: 200}}\r\n                            id=\"new-item\"\r\n                            autoComplete='off'\r\n                            label=\"Add to List\"\r\n                            variant=\"outlined\"\r\n                            value={newItem}\r\n                            onChange={(e) => setItem(e.target.value)}\r\n                            fullWidth\r\n                            sx={{height: '56px',}}\r\n                            inputRef={textRef}\r\n                            InputProps={{\r\n                                sx: {\r\n                                    borderTopRightRadius: 0,\r\n                                    borderBottomRightRadius: 0,\r\n                                    '& .MuiOutlinedInput-notchedOutline': {\r\n                                        borderTopRightRadius: 0,\r\n                                        borderBottomRightRadius: 0,\r\n                                    },\r\n                                    height: '56px',\r\n                                    borderColor: 'primary.darker',\r\n                                },\r\n                            }}\r\n                        />\r\n                        {hasLink()  && (\r\n                            <TextField\r\n                                inputProps={{maxLength: 200}}\r\n                                id=\"new-item\"\r\n                                label=\"URL\"\r\n                                autoComplete='off'\r\n                                variant=\"outlined\"\r\n                                value={link}\r\n                                onChange={(e) => setLink(e.target.value)}\r\n                                fullWidth\r\n                                sx={{height: '56px',}}\r\n                                InputProps={{\r\n                                    sx: {\r\n                                        borderTopRightRadius: 0,\r\n                                        borderBottomRightRadius: 0,\r\n                                        '& .MuiOutlinedInput-notchedOutline': {\r\n                                            borderTopRightRadius: 0,\r\n                                            borderBottomRightRadius: 0,\r\n                                        },\r\n                                        height: '56px',\r\n                                        borderColor: 'primary.darker',\r\n                                    },\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </Box>\r\n                    {loading ? (<CircularProgress></CircularProgress>) : (<Button\r\n                        type={\"submit\"}\r\n                        variant=\"outlined\"\r\n                        sx={{\r\n                            borderTopLeftRadius: 0,\r\n                            borderBottomLeftRadius: 0,\r\n                            minWidth: '56px',\r\n                            height:  hasLink() ? '112px' : '56px'\r\n                        }}\r\n                    >\r\n                        <AddIcon/>\r\n                    </Button>)}\r\n\r\n                </Box>\r\n                {hasComment() && <TextField\r\n                    inputProps={{maxLength: 1000}}\r\n                    id=\"outlined-multiline-flexible\"\r\n                    label=\"Notes\"\r\n                    multiline\r\n                    rows={4}\r\n                    autoComplete='off'\r\n                    variant=\"outlined\"\r\n                    value={comment}\r\n                    onChange={(e) => setComment(e.target.value)}\r\n                    fullWidth\r\n                    InputProps={{\r\n                        sx: {\r\n                            borderTopRightRadius: 0,\r\n                            borderBottomRightRadius: 0,\r\n                            '& .MuiOutlinedInput-notchedOutline': {\r\n                                borderTopRightRadius: 0,\r\n                                borderBottomRightRadius: 0,\r\n                            },\r\n                            borderColor: 'primary.darker',\r\n                        },\r\n                    }}\r\n                /> }\r\n\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddItem;\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Checkbox,\r\n    FormControl, FormControlLabel, MenuItem, Select, TextField, Typography\r\n} from \"@mui/material\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nfunction PublicListSettings(props) {\r\n    return null;\r\n}\r\n\r\nPublicListSettings.propTypes = {};\r\nconst EditListDetails = ({list, updateCopy}) => {\r\n    const {user} = useContext(AuthContext);\r\n\r\n\r\n\r\n    const updateTitle = (value) => {\r\n        const newList = {\r\n            ...list,\r\n            listInfo: {\r\n                ...list.listInfo,\r\n                listName: value,\r\n            },\r\n        };\r\n        updateCopy(newList);\r\n    };\r\n    const updateCheck = (value)=>{\r\n        const newList = {\r\n            ...list,\r\n            listInfo: {\r\n                ...list.listInfo,\r\n                hasCheck: value,\r\n            },\r\n        };\r\n        updateCopy(newList);\r\n    }\r\n    const updateLink = (value)=>{\r\n        const newList = {\r\n            ...list,\r\n            listInfo: {\r\n                ...list.listInfo,\r\n                hasLink: value,\r\n            },\r\n        };\r\n        updateCopy(newList);\r\n    }\r\n    const updateComment = (value)=>{\r\n        const newList = {\r\n            ...list,\r\n            listInfo: {\r\n                ...list.listInfo,\r\n                hasComment: value,\r\n            },\r\n        };\r\n        updateCopy(newList);\r\n    }\r\n\r\n    const updateDesc = (value) => {\r\n        const newList = {\r\n            ...list,\r\n            listInfo: {\r\n                ...list.listInfo,\r\n                listDesc: value,\r\n            },\r\n        };\r\n        updateCopy(newList);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <TextField\r\n                inputProps={{maxLength: 100}}\r\n                id=\"list-title\"\r\n                label=\"Title\"\r\n                variant=\"outlined\"\r\n                value={list.listInfo.listName}\r\n                onChange={(e) => updateTitle(e.target.value)}\r\n                fullWidth\r\n                sx={{marginBottom: 1}}\r\n            />\r\n            <TextField\r\n                inputProps={{maxLength: 100}}\r\n                id=\"list-desc\"\r\n                label=\"Description (optional)\"\r\n                variant=\"outlined\"\r\n                value={list.listInfo.listDesc}\r\n                onChange={(e) => updateDesc(e.target.value)}\r\n                fullWidth\r\n                sx={{marginBottom: 1}}\r\n            />\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', marginBottom: 1 }}>\r\n                <Typography fontSize={\"large\"} align={\"left\"} padding={\"8px\"} paddingTop={\"18px\"} color={\"secondary.main\"}>List functions</Typography>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Checkbox\r\n                            checked={list.listInfo.hasCheck}\r\n                            onChange={(e) => updateCheck( e.target.checked)}\r\n                            color=\"primary\"\r\n                        />\r\n                    }\r\n                    label=\"Enable CheckList\"\r\n                />\r\n                <FormControlLabel\r\n                    control={\r\n                        <Checkbox\r\n                            checked={list.listInfo.hasLink}\r\n                            onChange={(e) => updateLink(e.target.checked)}\r\n                            color=\"primary\"\r\n                        />\r\n                    }\r\n                    label=\"Enable Links\"\r\n                />\r\n                <FormControlLabel\r\n                    control={\r\n                        <Checkbox\r\n                            checked={list.listInfo.hasComment}\r\n                            onChange={(e) => updateComment(e.target.checked)}\r\n                            color=\"primary\"\r\n                        />\r\n                    }\r\n                    label=\"Enable Notes\"\r\n                />\r\n            </Box>\r\n\r\n</>\r\n    );\r\n};\r\n\r\nexport default EditListDetails;\r\n","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {Box, Button, CircularProgress, Typography} from \"@mui/material\";\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport {BASE_URL_PUBLIC} from \"../constants\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst api = new ApiCaller()\r\nconst PublicListSettings = ({uList, updateList}) => {\r\n    const {loginDetails} = useContext(AuthContext);\r\n    const [isPublic, setPublic] = useState(false);\r\n    const [address, setAddress] = useState(\"\");\r\n    const [copied, setCopied] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const copyToClipboard = async () => {\r\n        try {\r\n            await navigator.clipboard.writeText(address);\r\n            setCopied(true);\r\n            setTimeout(() => setCopied(false), 2000);\r\n        } catch (err) {\r\n            console.error(\"Failed to copy text: \", err);\r\n        }\r\n    };\r\n\r\n    function createURL() {\r\n        if (uList.listInfo.uuid !== null) {\r\n            setAddress(BASE_URL_PUBLIC + uList.listInfo.uuid)\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPublic(uList.listInfo.uuid !== null)\r\n        createURL();\r\n        setLoading(false)\r\n    }, [uList]);\r\n\r\n    const makePublic = async () => {\r\n        setLoading(true)\r\n        const updated = await api.sendPost(\"list/makePublic\", uList, loginDetails)\r\n        updateList(updated)\r\n    }\r\n    const makePrivate = async () => {\r\n        setLoading(true)\r\n        const updated = await api.sendPost(\"list/makePrivate\", uList, loginDetails)\r\n        updateList(updated)\r\n    }\r\n    const goToPublic = () => {\r\n        navigate(`/web/public/${uList.listInfo.uuid}`)\r\n    }\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{maxWidth: 300}}\r\n            >\r\n                {isPublic ? (\r\n                    <>\r\n                        <Typography>List is <strong>Public</strong></Typography>\r\n                        <br/>\r\n                        <Typography>Share the link with anyone to let them view your list.</Typography>\r\n                        <br/>\r\n                        <Button sx={{m: 1}} variant=\"outlined\" fullWidth onClick={copyToClipboard}>\r\n                            {copied ? \"Link Copied!\" : \"Copy Link\"}\r\n                        </Button>\r\n                        <Button sx={{m: 1}} variant=\"outlined\" fullWidth onClick={goToPublic}>\r\n                            Go to Public List\r\n                        </Button>\r\n\r\n\r\n                        {loading ? (<CircularProgress></CircularProgress>) : (\r\n                            <Button sx={{m: 1}} variant=\"outlined\" fullWidth onClick={makePrivate}>\r\n                                Make private\r\n                            </Button>)}\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Typography>List is <strong>Private</strong>\r\n                            <br/> Only you and those you invite are able to access the list.</Typography><br/>\r\n                        {loading ? (<CircularProgress></CircularProgress>) : (\r\n                            <Button sx={{m: 1}} variant=\"outlined\" fullWidth onClick={makePublic}>\r\n                                Make public\r\n                            </Button>)}<br/>\r\n                        <Typography>Make the list public to be able to share your list with anyone who has the link to\r\n                            it.</Typography>\r\n\r\n\r\n                    </>\r\n                )}\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PublicListSettings;\r\n\r\n\r\n\r\n\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Accordion, AccordionDetails, AccordionSummary,\r\n    FormControl, MenuItem, Select, TextField, Typography,\r\n    IconButton, Box, Button\r\n} from \"@mui/material\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\n\r\nconst apiCaller = new ApiCaller();\r\n\r\nfunction Spinner() {\r\n    return null;\r\n}\r\n\r\nconst HandleUsers = ({list, updateCopy}) => {\r\n    const {loginDetails} = useContext(AuthContext);\r\n    const [newUser, setNewUser] = useState(\"\");\r\n    const [newUserRole, setNewUserRole] = useState(\"VIEWER\");\r\n    const [userCheckLoading, setUserLoading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const editors = list.editors || [];\r\n    const viewers = list.viewers || [];\r\n\r\n    const handleRoleChange = (user, newRole) => {\r\n        let newEditors = [...editors];\r\n        let newViewers = [...viewers];\r\n\r\n        if (newRole === \"EDITOR\") {\r\n            newViewers = newViewers.filter(viewer => viewer !== user);\r\n            if (!newEditors.includes(user)) {\r\n                newEditors.push(user);\r\n            }\r\n        } else if (newRole === \"VIEWER\") {\r\n            newEditors = newEditors.filter(editor => editor !== user);\r\n            if (!newViewers.includes(user)) {\r\n                newViewers.push(user);\r\n            }\r\n        }\r\n\r\n        const newList = {\r\n            ...list,\r\n            editors: newEditors,\r\n            viewers: newViewers,\r\n        };\r\n\r\n        updateCopy(newList);\r\n    };\r\n\r\n\r\n    const handleRemoveUser = (user) => {\r\n        const newList = {\r\n            ...list,\r\n            editors: editors.filter((editor) => editor !== user),\r\n            viewers: viewers.filter((viewer) => viewer !== user),\r\n        };\r\n        updateCopy(newList);\r\n    };\r\n\r\n    const addUser = async () => {\r\n        setUserLoading(true);\r\n        setErrorMessage(\"\");\r\n\r\n        try {\r\n            const result = await apiCaller.sendPost(\"user/userExists\", {username: newUser}, loginDetails);\r\n\r\n            if (result === true) {\r\n                const newList = {\r\n                    ...list,\r\n                    editors: newUserRole === \"EDITOR\" ? [...editors, newUser] : editors,\r\n                    viewers: newUserRole === \"VIEWER\" ? [...viewers, newUser] : viewers,\r\n                };\r\n                setNewUser(\"\");\r\n                setNewUserRole(\"VIEWER\");\r\n                updateCopy(newList);\r\n            } else {\r\n                setErrorMessage(\"The username does not exist.\");\r\n            }\r\n        } catch (e) {\r\n            setErrorMessage(\"An error occurred while checking the username.\");\r\n        } finally {\r\n            setUserLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleNewUserRoleChange = (event) => {\r\n        setNewUserRole(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n                    {editors.length > 0 || viewers.length > 0 ? (\r\n                        <>\r\n                            {editors.map((user, index) => (\r\n                                <Box key={index} sx={{display: \"flex\", alignItems: \"center\", marginBottom: 1}}>\r\n                                    <Typography sx={{flexGrow: 1, marginLeft: 2}}>{user}</Typography>\r\n                                    <FormControl sx={{width: 100, marginRight: 2}}>\r\n                                        <Select\r\n                                            value=\"EDITOR\"\r\n                                            onChange={(e) => handleRoleChange(user, e.target.value)}\r\n                                        >\r\n                                            <MenuItem value=\"EDITOR\">Editor</MenuItem>\r\n                                            <MenuItem value=\"VIEWER\">Viewer</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    <IconButton onClick={() => handleRemoveUser(user)} color=\"error\">\r\n                                        <DeleteIcon/>\r\n                                    </IconButton>\r\n                                </Box>\r\n                            ))}\r\n                            {viewers.map((user, index) => (\r\n                                <Box key={index} sx={{display: \"flex\", alignItems: \"center\", marginBottom: 1}}>\r\n                                    <Typography sx={{flexGrow: 1, marginLeft: 2}}>{user}</Typography>\r\n                                    <FormControl sx={{width: 100, marginRight: 2}}>\r\n                                        <Select\r\n                                            value=\"VIEWER\"\r\n                                            onChange={(e) => handleRoleChange(user, e.target.value)}\r\n                                        >\r\n                                            <MenuItem value=\"EDITOR\">Editor</MenuItem>\r\n                                            <MenuItem value=\"VIEWER\">Viewer</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    <IconButton onClick={() => handleRemoveUser(user)} color=\"error\">\r\n                                        <DeleteIcon/>\r\n                                    </IconButton>\r\n                                </Box>\r\n                            ))}\r\n                        </>\r\n                    ) : (\r\n                        <Typography sx={{marginLeft: 2}}>\r\n                            List is currently private.\r\n                        </Typography>\r\n                    )}\r\n<br />\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    id=\"panel-header\"\r\n                    aria-controls=\"panel-content\"\r\n\r\n                >\r\n                    <Box sx={{width: '100%', display: 'flex', justifyContent: 'center'}}>\r\n                        <Typography fontSize={\"large\"}>Add User</Typography>\r\n                    </Box>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <FormControl sx={{maxWidth: 350, marginBottom: 2}}>\r\n                        <TextField\r\n                            inputProps={{maxLength: 50}}\r\n                            id=\"new-item\"\r\n                            label=\"Username\"\r\n                            variant=\"outlined\"\r\n                            autoComplete='off'\r\n                            value={newUser}\r\n                            onChange={(e) => setNewUser(e.target.value)}\r\n                            fullWidth\r\n                        />\r\n                    </FormControl>\r\n                    <Box sx={{display: \"flex\", justifyContent: \"space-between\", width: \"100%\", maxWidth: 350}}>\r\n                        <FormControl sx={{width: \"48%\"}}>\r\n                            <Select\r\n                                value={newUserRole}\r\n                                onChange={handleNewUserRoleChange}\r\n                                inputProps={{\r\n                                    name: \"role\",\r\n                                    id: \"uncontrolled-native\",\r\n                                }}\r\n                                sx={{width: \"100%\"}}\r\n                            >\r\n                                <MenuItem value={\"VIEWER\"}>Viewer</MenuItem>\r\n                                <MenuItem value={\"EDITOR\"}>Editor</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        {userCheckLoading ? (\r\n                            <Spinner/>\r\n                        ) : (\r\n                            <Button onClick={addUser} variant={\"solid\"} sx={{height: \"56px\", width: \"48%\"}}>\r\n                                Add User\r\n                            </Button>\r\n                        )}\r\n\r\n                    </Box>\r\n                    <br/>\r\n                    <Typography color={\"error\"}> {errorMessage}</Typography>\r\n</AccordionDetails>\r\n</Accordion>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HandleUsers;\r\n","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\n\r\nconst ViewOnlyUsers = ({uList}) => {\r\n\r\n    return (\r\n        <>\r\n            <Box p={2}>\r\n                <Box sx={{display: 'flex'}}>\r\n                    <Typography fontSize={\"large\"} sx={{fontFamily: 'Garamond'}}\r\n                                minWidth={100}><strong>Owner: </strong></Typography>\r\n                    <Typography fontSize={\"large\"}>{uList.owner}</Typography>\r\n\r\n                </Box>\r\n                {!uList.editors || uList.editors.length !== 0 && (\r\n                    <Box sx={{display: 'flex'}} >\r\n                        <Typography fontSize={\"large\"} sx={{fontFamily: 'Garamond'}}\r\n                                    minWidth={100}><strong>Editors: </strong></Typography>\r\n                        <Box>\r\n                            {uList.editors.map((user) => (<Typography  key={user} fontSize={\"large\"}>{user}</Typography>))}\r\n                        </Box>\r\n                    </Box>\r\n\r\n                )}\r\n                {!uList.viewers || uList.viewers.length > 0 && (\r\n                    <Box sx={{display: 'flex'}}>\r\n                        <Typography fontSize={\"large\"} sx={{fontFamily: 'Garamond'}}\r\n                                    minWidth={100}><strong>Viewers: </strong></Typography>\r\n                        <Box>\r\n                            {uList.viewers.map((user) => (<Typography  key={user} fontSize={\"large\"}>{user}</Typography>))}\r\n                        </Box>\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewOnlyUsers;\r\n\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Typography\r\n} from \"@mui/material\";\r\n\r\nconst BulkAdd = ({ uList, updateList }) => {\r\n    const [bulkItems, setBulkItems] = useState('');\r\n    const [added, setAdded] = useState(0);\r\n    const textRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    function addToList(i, updatedList) {\r\n        const newItemObj = {\r\n            listId: uList.listInfo.id,\r\n            item: i,\r\n            itemOrder: updatedList.items.length + 1\r\n        };\r\n\r\n        return {\r\n            ...updatedList,\r\n            items: [...updatedList.items, newItemObj]\r\n        };\r\n    }\r\n\r\n    function bulkAdd() {\r\n        let updatedList = { ...uList };\r\n\r\n        const items = bulkItems.split(/\\r?\\n/);\r\n        let count = 0;\r\n        items.forEach(i => {\r\n            if (i.trim() !== '') {\r\n                updatedList = addToList(i, updatedList);\r\n                count++;\r\n            }\r\n        });\r\n\r\n        updateList(updatedList);\r\n        setBulkItems('');\r\n        setAdded(count);\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n                    <Typography fontSize={\"small\"} sx={{ paddingBottom: 1 }}>\r\n                        Separate items by new line.\r\n                    </Typography>\r\n                    <TextField\r\n                        inputProps={{ maxLength: 200 }}\r\n                        autoComplete=\"off\"\r\n                        id=\"bulk-add\"\r\n                        label=\"Bulk add\"\r\n                        variant=\"outlined\"\r\n                        value={bulkItems}\r\n                        onChange={(e) => setBulkItems(e.target.value)}\r\n                        fullWidth\r\n                        multiline\r\n                        minRows={3}\r\n                        InputProps={{\r\n                            sx: {\r\n                                height: '112px',\r\n                                borderColor: 'primary.darker',\r\n                            },\r\n                        }}\r\n                    />\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        p={1}\r\n                        fullWidth\r\n                        onClick={bulkAdd}>Add items</Button>\r\n            {added >0  && (<Typography> {added} items added to list.</Typography>)}\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BulkAdd;\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport {\r\n    Button,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Dialog,\r\n} from '@mui/material';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport EditListDetails from \"./EditListDetails\";\r\nimport {ApiCaller} from \"../ApiCaller\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport PublicListSettings from \"./PublicListSettings\";\r\nimport HandleUsers from \"./HandleUsers\";\r\nimport ViewOnlyUsers from \"./ViewOnlyUsers\";\r\nimport BulkAdd from \"./BulkAdd\";\r\n\r\nconst apiCaller = new ApiCaller()\r\nconst ListDialog = ({uList, updateList, dialog, setDialog, option}) => {\r\n    const {loginDetails, user} = useContext(AuthContext);\r\n    const [listCopy, setCopy] = useState({...uList})\r\n    const [canSave, setCanSave] = useState(true)\r\n    const navigate = useNavigate();\r\n\r\n\r\n    useEffect(() => {\r\n        const saveCheck = () => {\r\n            const saveOptions = [\"manageUsers\", \"editListInfo\",]\r\n            return saveOptions.includes(option);\r\n        }\r\n        setCanSave(saveCheck())\r\n    }, [option]);\r\n\r\n    function closeDialog() {\r\n        setDialog(false);\r\n    }\r\n\r\n    function deleteUsers() {\r\n        let deletedEditors = [];\r\n        let deletedViewers = [];\r\n        if (uList.editors !== listCopy.editors) {\r\n            deletedEditors = uList.editors.filter(editor => !listCopy.editors.includes(editor));\r\n        }\r\n        if (uList.viewers !== listCopy.viewers) {\r\n            deletedViewers = uList.viewers.filter(viewer => !listCopy.viewers.includes(viewer));\r\n        }\r\n        const deletedUsers = deletedEditors.concat(deletedViewers)\r\n        deletedUsers.forEach(user => {\r\n            apiCaller.sendPost(\"list/removeUser\", {user: user, listId: uList.listInfo.id}, loginDetails)\r\n        });\r\n    }\r\n\r\n    function saveAndClose() {\r\n        if (option === \"manageUsers\") {\r\n            deleteUsers();\r\n        }\r\n        updateList(listCopy)\r\n        setDialog(false);\r\n    }\r\n\r\n    function getOption() {\r\n        switch (option) {\r\n            case \"manageUsers\":\r\n                return <><HandleUsers list={listCopy} updateCopy={setCopy}></HandleUsers></>\r\n            case \"editListInfo\":\r\n                return <><EditListDetails list={listCopy} updateCopy={setCopy}></EditListDetails></>\r\n            case \"deleteList\":\r\n                return deleteDialog()\r\n            case \"leaveList\":\r\n                return leaveDialog()\r\n            case \"userInfo\":\r\n                return <><ViewOnlyUsers uList={listCopy}></ViewOnlyUsers></>\r\n            case \"bulkAdd\":\r\n                return <><BulkAdd uList={uList} updateList={updateList}></BulkAdd></>\r\n            case \"publicSettings\":\r\n                return <><PublicListSettings uList={uList} updateList={updateList}></PublicListSettings></>\r\n        }\r\n    }\r\n\r\n    function getTitle() {\r\n        switch (option) {\r\n            case \"manageUsers\":\r\n                return \"Manage Users\"\r\n            case \"editListInfo\":\r\n                return \"Edit Info\"\r\n            case \"deleteList\":\r\n                return \"Delete List\"\r\n            case \"leaveList\":\r\n                return \"Leave List\"\r\n            case \"userInfo\":\r\n                return \"Users\"\r\n            case \"bulkAdd\":\r\n                return \"Add Multiple Items\"\r\n            case \"publicSettings\":\r\n                return \"Public List Settings\"\r\n        }\r\n    }\r\n\r\n    function deleteDialog() {\r\n        return <><Typography textAlign={'center'} p={1}>Warning: <br/>Deleting a list cannot be\r\n            reversed.</Typography>\r\n            <Button onClick={deleteList} variant={\"contained\"} sx={{padding: 2}}\r\n                    color={\"warning\"} fullWidth>Delete list</Button></>\r\n    }\r\n\r\n    async function deleteList() {\r\n        await apiCaller.sendDelete(\"list\", uList.listInfo.id, loginDetails)\r\n        setDialog(false)\r\n        navigate(`/web/overview`);\r\n    }\r\n\r\n    function leaveDialog() {\r\n        return <> <Typography textAlign={'center'} p={1}>Warning: <br/>If you want to come back, the owner\r\n            will have to add you again.</Typography>\r\n            <Button onClick={leaveList} variant={\"contained\"} sx={{padding: 2}}\r\n                    color={\"warning\"} fullWidth>Leave list</Button></>\r\n    }\r\n\r\n    async function leaveList() {\r\n        await apiCaller.sendPost(\"list/removeUser\", {user: user.username, listId: uList.listInfo.id}, loginDetails)\r\n        setDialog(false)\r\n        navigate(`/web/overview`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <Dialog\r\n                open={dialog}\r\n                onClose={closeDialog}\r\n            >\r\n                <DialogTitle textAlign={'center'}>\r\n                    {getTitle()}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {getOption()}\r\n\r\n                </DialogContent>\r\n                <DialogActions sx={{justifyContent: 'center'}}>\r\n                    <Button onClick={closeDialog} variant=\"contained\">\r\n                        Close\r\n                    </Button>\r\n\r\n                    {canSave && (<Button onClick={saveAndClose} variant=\"contained\">\r\n                        Save Changes\r\n                    </Button>)}\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListDialog;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { IconButton, Menu, MenuItem } from '@mui/material';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport { AuthContext } from '../AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ListDialog from './ListDialog';\r\n\r\nconst ListOptions = ({ uList, updateList }) => {\r\n    const { user } = useContext(AuthContext);\r\n    const navigate = useNavigate();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [isPublic, setIsPublic] = useState(false);\r\n    const [dialogOption, setDialogOption] = useState(null);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsPublic(uList.listInfo.uuid !== null);\r\n    }, [uList]);\r\n\r\n    const handleMenuClick = (event) => setAnchorEl(event.currentTarget);\r\n    const handleMenuClose = () => setAnchorEl(null);\r\n\r\n    const openDialog = (option) => {\r\n        setDialogOption(option);\r\n        setDialogOpen(true);\r\n        handleMenuClose();\r\n    };\r\n\r\n    const renderMenuItems = () => {\r\n        const commonItems = [\r\n            { text: 'User Information', action: () => openDialog('userInfo'), roles: ['viewers','editors'] },\r\n            { text: 'Bulk Add Items', action: () => openDialog('bulkAdd'), roles: ['owner', 'editors'] },\r\n            { text: 'Edit List Information', action: () => openDialog('editListInfo'), roles: ['owner', 'editors'] },\r\n            { text: 'Go to Public Page', action: () => navigate(`/web/public/${uList.listInfo.uuid}`), roles: ['viewers', 'editors'], condition: isPublic },\r\n            { text: 'Leave List', action: () => openDialog('leaveList'), roles: ['viewers', 'editors'] },\r\n            { text: 'Handle Users', action: () => openDialog('manageUsers'), roles:['owner'] },\r\n            { text: 'Edit Public Settings', action: () => openDialog('publicSettings'), roles:['owner'] },\r\n            { text: 'Delete List', action: () => openDialog('deleteList'), roles: ['owner'] }\r\n        ];\r\n\r\n\r\n        const ownerItems = commonItems.filter(item => item.roles.includes('owner'));\r\n        const editorItems = commonItems.filter(item => item.roles.includes('editors'));\r\n        const viewerItems = commonItems.filter(item => item.roles.includes('viewers'));\r\n\r\n        if (uList.owner === user.username) {\r\n            return ownerItems;\r\n        } else if (uList.editors !== null && uList.editors.includes(user.username)) {\r\n            return editorItems;\r\n        } else if (uList.viewers !== null && uList.viewers.includes(user.username)) {\r\n            return viewerItems;\r\n        }\r\n\r\n        return [];\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <IconButton\r\n                sx={{ position: 'sticky', top: 0, right: 0, color: 'primary.lighter', fontSize: 'large' }}\r\n                id=\"basic-button\"\r\n                aria-controls={Boolean(anchorEl) ? 'basic-menu' : undefined}\r\n                aria-haspopup=\"true\"\r\n                aria-expanded={Boolean(anchorEl) ? 'true' : undefined}\r\n                onClick={handleMenuClick}\r\n            >\r\n                <MoreVertIcon />\r\n            </IconButton>\r\n\r\n            <Menu\r\n                id=\"basic-menu\"\r\n                anchorEl={anchorEl}\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleMenuClose}\r\n                MenuListProps={{ 'aria-labelledby': 'basic-button' }}\r\n            >\r\n                {renderMenuItems().map(({ text, action, condition = true }) =>\r\n                    condition && <MenuItem key={text} onClick={action}>{text}</MenuItem>\r\n                )}\r\n            </Menu>\r\n\r\n            <ListDialog\r\n                uList={uList}\r\n                updateList={updateList}\r\n                dialog={dialogOpen}\r\n                setDialog={setDialogOpen}\r\n                option={dialogOption}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListOptions;\r\n","import React, {useContext, useState} from 'react';\r\nimport {\r\n    Box, IconButton\r\n} from '@mui/material';\r\nimport Typography from \"@mui/material/Typography\";\r\nimport LockIcon from \"@mui/icons-material/Lock\";\r\nimport LockOpenIcon from \"@mui/icons-material/LockOpen\";\r\nimport CheckListDisplay from \"./CheckListDisplay\";\r\nimport BasicList from \"./BasicList\";\r\nimport GroupIcon from \"@mui/icons-material/Group\";\r\nimport {AuthContext} from \"../AuthContext\";\r\nimport EditItems from \"./EditItems\";\r\nimport AddItem from \"./AddItem\";\r\nimport PageHeader from \"./PageHeader\";\r\nimport ListOptions from \"./ListOptions\";\r\nimport ListDesc from \"./ListDesc\";\r\nimport LinkedList from \"./LinkedList\";\r\nimport MultiList from \"./MultiList\";\r\n\r\n\r\nconst ListDisplay = ({uList, updateList}) => {\r\n    const {user} = useContext(AuthContext);\r\n    const [locked, setLocked] = useState(true);\r\n    const [editRights, setEditRights] = useState(() => {\r\n        return user.username === uList.owner || uList.editors.includes(user.username);\r\n    });\r\n\r\n    const toggleLocked = () => {\r\n        setLocked(!locked);\r\n    };\r\n\r\n    function getListType(type) {\r\n        switch (type.listInfo.type) {\r\n            case 'CHECK':\r\n                return <CheckListDisplay uList={uList} updateList={updateList} isPublic={false}/>;\r\n            case \"LINK\":\r\n                return <LinkedList uList={uList} updateList={updateList} isPublic={false}></LinkedList>;\r\n            case \"BASIC\":\r\n                return <BasicList uList={uList}/>;\r\n            default:\r\n                return <MultiList uList={uList} updateList={updateList} isPublic={false}></MultiList>\r\n        }\r\n    }\r\n\r\n    const users = () => {\r\n        if (uList.owner === user.username && uList.editors.length === 0 && uList.viewers.length === 0) {\r\n            return <></>\r\n        } else {\r\n            const editorsAndViewers = [...uList.editors, ...uList.viewers].join(\", \");\r\n            const allUsers = uList.owner + \", \" + editorsAndViewers\r\n\r\n            return (\r\n                <>\r\n                    <GroupIcon sx={{verticalAlign: 'middle', mr: 1}}/>\r\n                    {allUsers}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box maxWidth={750} sx={{mx: 'auto'}} variant=\"contained\">\r\n\r\n\r\n                <Box>\r\n\r\n                    <PageHeader title={uList.listInfo.listName}></PageHeader>\r\n\r\n                    <ListDesc uList={uList}></ListDesc>\r\n\r\n                    <Typography sx={{gridRow: '2', gridColumn: '1 / 3', textAlign: 'left', p: 1}}>\r\n                        {users()}\r\n                    </Typography>\r\n\r\n                </Box>\r\n                <Box sx={{\r\n                    border: '1px solid ',\r\n                    borderColor: 'primary.darker'\r\n                }}>\r\n                    <Box sx={{backgroundColor: \"primary.darker\", display: 'flex', justifyContent: 'flex-end',}}>\r\n                        {editRights && (\r\n                            <IconButton variant=\"outlined\" onClick={toggleLocked}>\r\n                                {locked ? <LockIcon sx={{color: 'primary.lighter'}}/> :\r\n                                    <LockOpenIcon sx={{color: 'primary.lighter'}}/>}\r\n                            </IconButton>\r\n                        )}\r\n                        <ListOptions uList={uList} updateList={updateList}></ListOptions>\r\n                    </Box>\r\n\r\n\r\n                    {locked ? (\r\n                        <>\r\n                        <Box>{getListType(uList)}</Box>\r\n                        {editRights && (<AddItem uList={uList} updateList={updateList}></AddItem>)}</>\r\n                    ) : (\r\n                        <EditItems uList={uList} updateList={updateList} />\r\n                    )}\r\n\r\n\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ListDisplay;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Box, CircularProgress, Typography } from '@mui/material';\r\nimport { AuthContext } from \"../AuthContext\";\r\nimport SockJS from \"sockjs-client\";\r\nimport { Client } from \"@stomp/stompjs\";\r\nimport { ApiCaller } from \"../ApiCaller\";\r\nimport ListDisplay from \"../components/ListDisplay\";\r\nimport { BASE_URL_SOCKET } from \"../constants\";\r\n\r\nconst apiCaller = new ApiCaller();\r\n\r\nconst ViewList = () => {\r\n    const { id } = useParams();\r\n    const { loginDetails } = useContext(AuthContext);\r\n    const [loading, setLoading] = useState(true);\r\n    const [uList, setList] = useState(null);\r\n    const [stompClient, setStompClient] = useState(null);\r\n    const [fetchError, setFetchError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchList = async () => {\r\n            try {\r\n                const data = await apiCaller.sendGet(`list/${id}`, loginDetails);\r\n                setList(data);\r\n            } catch (error) {\r\n                setFetchError(true);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchList();\r\n\r\n        const socket = new SockJS(BASE_URL_SOCKET);\r\n        const client = new Client({\r\n            webSocketFactory: () => socket,\r\n            onConnect: () => {\r\n                console.log('Connected to WebSocket');\r\n                client.subscribe(`/topic/list/${id}`, (message) => {\r\n                    const updatedList = JSON.parse(message.body);\r\n                    setList(updatedList);\r\n                });\r\n            },\r\n            onStompError: (frame) => {\r\n                console.error('Broker reported error: ' + frame.headers['message']);\r\n                console.error('Additional details: ' + frame.body);\r\n            }\r\n        });\r\n\r\n        client.activate();\r\n        setStompClient(client);\r\n\r\n        return () => {\r\n            if (client && client.connected) {\r\n                client.deactivate();\r\n            }\r\n        };\r\n    }, [id, loginDetails]);\r\n\r\n    const updateList = (newList) => {\r\n\r\n        if (stompClient && stompClient.connected) {\r\n            stompClient.publish({\r\n                destination: `/app/list/${id}`,\r\n                body: JSON.stringify(newList)\r\n            });\r\n            console.log(\"Sent update to WebSocket\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                <Box>\r\n                    <CircularProgress />\r\n                    <Typography>Loading List</Typography>\r\n                </Box>\r\n            ) : (\r\n                <>\r\n                    {fetchError ? (\r\n                        <Typography>Unable to load list.</Typography>\r\n                    ) : (\r\n                        <ListDisplay uList={uList} updateList={updateList} />\r\n                    )}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewList;\r\n"],"names":["ApiCaller","constructor","baseUrl","BASE_URL","sendPost","path","data","loginDetails","response","fetch","this","method","headers","body","JSON","stringify","ok","console","log","json","errorResponse","Error","sendPostNoLogin","sendGet","sendGetNoAuth","sendDelete","_ref","uList","_jsx","_Fragment","children","List","items","map","item","_jsxs","ListItem","sx","cursor","border","borderColor","marginTop","borderRadius","ListItemAvatar","Box","ListItemText","primary","primaryTypographyProps","fontSize","IconButton","pointerEvents","edge","Icon","id","updateList","isPublic","user","useContext","AuthContext","editRights","setEditRights","useState","username","owner","editors","includes","onClick","itemId","updatedItems","itemStatus","handleItemClick","status","CheckBoxIcon","color","CheckBoxOutlineBlankIcon","dialog","setDialog","selected","setSelected","selectedURL","setSelectedURL","copied","setCopied","openInNewTab","url","window","open","OpenInNewIcon","openSettings","SettingsIcon","Dialog","onClose","closeDialog","DialogTitle","textAlign","Button","variant","fullWidth","async","navigator","clipboard","writeText","setTimeout","err","error","DialogContent","TextField","label","value","onChange","e","target","DialogActions","justifyContent","saveAndClose","description","listInfo","listDesc","marginBottom","gridRow","gridColumn","m","paddingLeft","paddingRight","Typography","openItems","setOpenItems","toggleOpen","prev","noteDialog","setNoteDialog","comment","setComment","listHasLinks","hasLink","itemHasLink","listHasComments","hasComment","itemHasComment","editCommentButton","openNoteEdit","EditNoteIcon","getCheckStatus","hasCheck","checked","getCheckBox","opacity","textDecoration","hasStrikeThrough","hasUnderline","link","KeyboardArrowDownIcon","KeyboardArrowRightIcon","toggleCheck","padding","secondary","secondaryTypographyProps","align","marginLeft","width","maxWidth","inputProps","maxLength","multiline","rows","autoComplete","title","paddingTop","fontFamily","api","loading","setLoading","useEffect","editItemDialog","setEditItemDialog","selectedItem","setSelectedItem","DragDropContext","onDragEnd","result","destination","startIndex","source","index","endIndex","copyList","reorderItem","splice","forEach","itemOrder","Droppable","droppableId","droppableProvider","ref","innerRef","droppableProps","Draggable","draggableId","draggableProvider","display","draggableProps","dragHandleProps","alignItems","DragIndicator","BorderColorIcon","updated","removeItem","height","CircularProgress","ClearIcon","placeholder","marginY","type","newItem","setItem","setLink","textRef","useRef","addOne","trim","updatedList","i","newItemObj","listId","length","addToList","current","focus","onSubmit","event","preventDefault","mt","flex","flexDirection","inputRef","InputProps","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","minWidth","AddIcon","list","updateCopy","listName","newList","updateTitle","updateDesc","FormControlLabel","control","Checkbox","updateCheck","updateLink","updateComment","setPublic","address","setAddress","navigate","useNavigate","uuid","BASE_URL_PUBLIC","createURL","goToPublic","apiCaller","Spinner","newUser","setNewUser","newUserRole","setNewUserRole","userCheckLoading","setUserLoading","errorMessage","setErrorMessage","viewers","handleRoleChange","newRole","newEditors","newViewers","filter","viewer","push","editor","handleRemoveUser","flexGrow","FormControl","marginRight","Select","MenuItem","DeleteIcon","Accordion","AccordionSummary","AccordionDetails","name","p","bulkItems","setBulkItems","added","setAdded","paddingBottom","minRows","split","count","option","listCopy","setCopy","canSave","setCanSave","deleteList","leaveList","getTitle","HandleUsers","EditListDetails","ViewOnlyUsers","BulkAdd","PublicListSettings","getOption","deletedEditors","deletedViewers","concat","deleteUsers","anchorEl","setAnchorEl","setIsPublic","dialogOption","setDialogOption","dialogOpen","setDialogOpen","handleMenuClose","openDialog","position","top","right","Boolean","undefined","currentTarget","MoreVertIcon","Menu","MenuListProps","renderMenuItems","commonItems","text","action","roles","condition","ownerItems","editorItems","viewerItems","_ref2","ListDialog","locked","setLocked","mx","PageHeader","ListDesc","users","editorsAndViewers","join","allUsers","GroupIcon","verticalAlign","mr","backgroundColor","toggleLocked","LockIcon","LockOpenIcon","ListOptions","CheckListDisplay","LinkedList","BasicList","MultiList","getListType","AddItem","EditItems","ViewList","useParams","setList","stompClient","setStompClient","fetchError","setFetchError","fetchList","socket","SockJS","BASE_URL_SOCKET","client","Client","webSocketFactory","onConnect","subscribe","message","parse","onStompError","frame","activate","connected","deactivate","ListDisplay","publish"],"sourceRoot":""}